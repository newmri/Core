// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace LoginPacket
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum ErrorCode : sbyte
{
  SUCCESS = 0,
  UNKNOWN = 1,
  ALREADY_LOGINED = 2,
};

public enum Packet : byte
{
  NONE = 0,
  CS_LOGIN_REQ = 1,
  SC_LOGIN_RES = 2,
  SC_PING_REQ = 3,
  CS_PING_RES = 4,
  CS_LOGOUT_NOTI = 5,
  CS_CREATE_CHARACTER_REQ = 6,
  SC_CREATE_CHARACTER_RES = 7,
  CS_TEST_REQ = 8,
  SC_TEST_RES = 9,
};

public class PacketUnion {
  public Packet Type { get; set; }
  public object Value { get; set; }

  public PacketUnion() {
    this.Type = Packet.NONE;
    this.Value = null;
  }

  public T As<T>() where T : class { return this.Value as T; }
  public LoginPacket.CS_LOGIN_REQT AsCS_LOGIN_REQ() { return this.As<LoginPacket.CS_LOGIN_REQT>(); }
  public LoginPacket.SC_LOGIN_REST AsSC_LOGIN_RES() { return this.As<LoginPacket.SC_LOGIN_REST>(); }
  public LoginPacket.SC_PING_REQT AsSC_PING_REQ() { return this.As<LoginPacket.SC_PING_REQT>(); }
  public LoginPacket.CS_PING_REST AsCS_PING_RES() { return this.As<LoginPacket.CS_PING_REST>(); }
  public LoginPacket.CS_LOGOUT_NOTIT AsCS_LOGOUT_NOTI() { return this.As<LoginPacket.CS_LOGOUT_NOTIT>(); }
  public LoginPacket.CS_CREATE_CHARACTER_REQT AsCS_CREATE_CHARACTER_REQ() { return this.As<LoginPacket.CS_CREATE_CHARACTER_REQT>(); }
  public LoginPacket.SC_CREATE_CHARACTER_REST AsSC_CREATE_CHARACTER_RES() { return this.As<LoginPacket.SC_CREATE_CHARACTER_REST>(); }
  public LoginPacket.CS_TEST_REQT AsCS_TEST_REQ() { return this.As<LoginPacket.CS_TEST_REQT>(); }
  public LoginPacket.SC_TEST_REST AsSC_TEST_RES() { return this.As<LoginPacket.SC_TEST_REST>(); }

  public static int Pack(FlatBuffers.FlatBufferBuilder builder, PacketUnion _o) {
    switch (_o.Type) {
      default: return 0;
      case Packet.CS_LOGIN_REQ: return LoginPacket.CS_LOGIN_REQ.Pack(builder, _o.AsCS_LOGIN_REQ()).Value;
      case Packet.SC_LOGIN_RES: return LoginPacket.SC_LOGIN_RES.Pack(builder, _o.AsSC_LOGIN_RES()).Value;
      case Packet.SC_PING_REQ: return LoginPacket.SC_PING_REQ.Pack(builder, _o.AsSC_PING_REQ()).Value;
      case Packet.CS_PING_RES: return LoginPacket.CS_PING_RES.Pack(builder, _o.AsCS_PING_RES()).Value;
      case Packet.CS_LOGOUT_NOTI: return LoginPacket.CS_LOGOUT_NOTI.Pack(builder, _o.AsCS_LOGOUT_NOTI()).Value;
      case Packet.CS_CREATE_CHARACTER_REQ: return LoginPacket.CS_CREATE_CHARACTER_REQ.Pack(builder, _o.AsCS_CREATE_CHARACTER_REQ()).Value;
      case Packet.SC_CREATE_CHARACTER_RES: return LoginPacket.SC_CREATE_CHARACTER_RES.Pack(builder, _o.AsSC_CREATE_CHARACTER_RES()).Value;
      case Packet.CS_TEST_REQ: return LoginPacket.CS_TEST_REQ.Pack(builder, _o.AsCS_TEST_REQ()).Value;
      case Packet.SC_TEST_RES: return LoginPacket.SC_TEST_RES.Pack(builder, _o.AsSC_TEST_RES()).Value;
    }
  }
}

public struct CS_LOGIN_REQ : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CS_LOGIN_REQ GetRootAsCS_LOGIN_REQ(ByteBuffer _bb) { return GetRootAsCS_LOGIN_REQ(_bb, new CS_LOGIN_REQ()); }
  public static CS_LOGIN_REQ GetRootAsCS_LOGIN_REQ(ByteBuffer _bb, CS_LOGIN_REQ obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CS_LOGIN_REQ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Uid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Token { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<LoginPacket.CS_LOGIN_REQ> CreateCS_LOGIN_REQ(FlatBufferBuilder builder,
      long uid = 0,
      int token = 0) {
    builder.StartTable(2);
    CS_LOGIN_REQ.AddUid(builder, uid);
    CS_LOGIN_REQ.AddToken(builder, token);
    return CS_LOGIN_REQ.EndCS_LOGIN_REQ(builder);
  }

  public static void StartCS_LOGIN_REQ(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddUid(FlatBufferBuilder builder, long uid) { builder.AddLong(0, uid, 0); }
  public static void AddToken(FlatBufferBuilder builder, int token) { builder.AddInt(1, token, 0); }
  public static Offset<LoginPacket.CS_LOGIN_REQ> EndCS_LOGIN_REQ(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.CS_LOGIN_REQ>(o);
  }
  public CS_LOGIN_REQT UnPack() {
    var _o = new CS_LOGIN_REQT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CS_LOGIN_REQT _o) {
    _o.Uid = this.Uid;
    _o.Token = this.Token;
  }
  public static Offset<LoginPacket.CS_LOGIN_REQ> Pack(FlatBufferBuilder builder, CS_LOGIN_REQT _o) {
    if (_o == null) return default(Offset<LoginPacket.CS_LOGIN_REQ>);
    return CreateCS_LOGIN_REQ(
      builder,
      _o.Uid,
      _o.Token);
  }
};

public class CS_LOGIN_REQT
{
  public long Uid { get; set; }
  public int Token { get; set; }

  public CS_LOGIN_REQT() {
    this.Uid = 0;
    this.Token = 0;
  }
}

public struct CharacterInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CharacterInfo GetRootAsCharacterInfo(ByteBuffer _bb) { return GetRootAsCharacterInfo(_bb, new CharacterInfo()); }
  public static CharacterInfo GetRootAsCharacterInfo(ByteBuffer _bb, CharacterInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Uid { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public byte Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public Define.Job Job { get { int o = __p.__offset(10); return o != 0 ? (Define.Job)__p.bb.Get(o + __p.bb_pos) : Define.Job.WARRIOR; } }
  public Info.CharacterGear? Gear { get { int o = __p.__offset(12); return o != 0 ? (Info.CharacterGear?)(new Info.CharacterGear()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<LoginPacket.CharacterInfo> CreateCharacterInfo(FlatBufferBuilder builder,
      long uid = 0,
      StringOffset nameOffset = default(StringOffset),
      byte level = 0,
      Define.Job job = Define.Job.WARRIOR,
      Info.CharacterGearT gear = null) {
    builder.StartTable(5);
    CharacterInfo.AddUid(builder, uid);
    CharacterInfo.AddGear(builder, Info.CharacterGear.Pack(builder, gear));
    CharacterInfo.AddName(builder, nameOffset);
    CharacterInfo.AddJob(builder, job);
    CharacterInfo.AddLevel(builder, level);
    return CharacterInfo.EndCharacterInfo(builder);
  }

  public static void StartCharacterInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddUid(FlatBufferBuilder builder, long uid) { builder.AddLong(0, uid, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, byte level) { builder.AddByte(2, level, 0); }
  public static void AddJob(FlatBufferBuilder builder, Define.Job job) { builder.AddByte(3, (byte)job, 0); }
  public static void AddGear(FlatBufferBuilder builder, Offset<Info.CharacterGear> gearOffset) { builder.AddStruct(4, gearOffset.Value, 0); }
  public static Offset<LoginPacket.CharacterInfo> EndCharacterInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.CharacterInfo>(o);
  }
  public CharacterInfoT UnPack() {
    var _o = new CharacterInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterInfoT _o) {
    _o.Uid = this.Uid;
    _o.Name = this.Name;
    _o.Level = this.Level;
    _o.Job = this.Job;
    _o.Gear = this.Gear.HasValue ? this.Gear.Value.UnPack() : null;
  }
  public static Offset<LoginPacket.CharacterInfo> Pack(FlatBufferBuilder builder, CharacterInfoT _o) {
    if (_o == null) return default(Offset<LoginPacket.CharacterInfo>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateCharacterInfo(
      builder,
      _o.Uid,
      _name,
      _o.Level,
      _o.Job,
      _o.Gear);
  }
};

public class CharacterInfoT
{
  public long Uid { get; set; }
  public string Name { get; set; }
  public byte Level { get; set; }
  public Define.Job Job { get; set; }
  public Info.CharacterGearT Gear { get; set; }

  public CharacterInfoT() {
    this.Uid = 0;
    this.Name = null;
    this.Level = 0;
    this.Job = Define.Job.WARRIOR;
    this.Gear = new Info.CharacterGearT();
  }
}

public struct SC_LOGIN_RES : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SC_LOGIN_RES GetRootAsSC_LOGIN_RES(ByteBuffer _bb) { return GetRootAsSC_LOGIN_RES(_bb, new SC_LOGIN_RES()); }
  public static SC_LOGIN_RES GetRootAsSC_LOGIN_RES(ByteBuffer _bb, SC_LOGIN_RES obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_LOGIN_RES __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LoginPacket.ErrorCode Result { get { int o = __p.__offset(4); return o != 0 ? (LoginPacket.ErrorCode)__p.bb.GetSbyte(o + __p.bb_pos) : LoginPacket.ErrorCode.SUCCESS; } }
  public byte MaxSlotCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte EmptySlotCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public LoginPacket.CharacterInfo? CharacterInfo(int j) { int o = __p.__offset(10); return o != 0 ? (LoginPacket.CharacterInfo?)(new LoginPacket.CharacterInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CharacterInfoLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LoginPacket.SC_LOGIN_RES> CreateSC_LOGIN_RES(FlatBufferBuilder builder,
      LoginPacket.ErrorCode result = LoginPacket.ErrorCode.SUCCESS,
      byte max_slot_count = 0,
      byte empty_slot_count = 0,
      VectorOffset character_infoOffset = default(VectorOffset)) {
    builder.StartTable(4);
    SC_LOGIN_RES.AddCharacterInfo(builder, character_infoOffset);
    SC_LOGIN_RES.AddEmptySlotCount(builder, empty_slot_count);
    SC_LOGIN_RES.AddMaxSlotCount(builder, max_slot_count);
    SC_LOGIN_RES.AddResult(builder, result);
    return SC_LOGIN_RES.EndSC_LOGIN_RES(builder);
  }

  public static void StartSC_LOGIN_RES(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddResult(FlatBufferBuilder builder, LoginPacket.ErrorCode result) { builder.AddSbyte(0, (sbyte)result, 0); }
  public static void AddMaxSlotCount(FlatBufferBuilder builder, byte maxSlotCount) { builder.AddByte(1, maxSlotCount, 0); }
  public static void AddEmptySlotCount(FlatBufferBuilder builder, byte emptySlotCount) { builder.AddByte(2, emptySlotCount, 0); }
  public static void AddCharacterInfo(FlatBufferBuilder builder, VectorOffset characterInfoOffset) { builder.AddOffset(3, characterInfoOffset.Value, 0); }
  public static VectorOffset CreateCharacterInfoVector(FlatBufferBuilder builder, Offset<LoginPacket.CharacterInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCharacterInfoVectorBlock(FlatBufferBuilder builder, Offset<LoginPacket.CharacterInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCharacterInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LoginPacket.SC_LOGIN_RES> EndSC_LOGIN_RES(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.SC_LOGIN_RES>(o);
  }
  public SC_LOGIN_REST UnPack() {
    var _o = new SC_LOGIN_REST();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SC_LOGIN_REST _o) {
    _o.Result = this.Result;
    _o.MaxSlotCount = this.MaxSlotCount;
    _o.EmptySlotCount = this.EmptySlotCount;
    _o.CharacterInfo = new List<LoginPacket.CharacterInfoT>();
    for (var _j = 0; _j < this.CharacterInfoLength; ++_j) {_o.CharacterInfo.Add(this.CharacterInfo(_j).HasValue ? this.CharacterInfo(_j).Value.UnPack() : null);}
  }
  public static Offset<LoginPacket.SC_LOGIN_RES> Pack(FlatBufferBuilder builder, SC_LOGIN_REST _o) {
    if (_o == null) return default(Offset<LoginPacket.SC_LOGIN_RES>);
    var _character_info = default(VectorOffset);
    if (_o.CharacterInfo != null) {
      var __character_info = new Offset<LoginPacket.CharacterInfo>[_o.CharacterInfo.Count];
      for (var _j = 0; _j < __character_info.Length; ++_j) { __character_info[_j] = LoginPacket.CharacterInfo.Pack(builder, _o.CharacterInfo[_j]); }
      _character_info = CreateCharacterInfoVector(builder, __character_info);
    }
    return CreateSC_LOGIN_RES(
      builder,
      _o.Result,
      _o.MaxSlotCount,
      _o.EmptySlotCount,
      _character_info);
  }
};

public class SC_LOGIN_REST
{
  public LoginPacket.ErrorCode Result { get; set; }
  public byte MaxSlotCount { get; set; }
  public byte EmptySlotCount { get; set; }
  public List<LoginPacket.CharacterInfoT> CharacterInfo { get; set; }

  public SC_LOGIN_REST() {
    this.Result = LoginPacket.ErrorCode.SUCCESS;
    this.MaxSlotCount = 0;
    this.EmptySlotCount = 0;
    this.CharacterInfo = null;
  }
}

public struct SC_PING_REQ : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SC_PING_REQ GetRootAsSC_PING_REQ(ByteBuffer _bb) { return GetRootAsSC_PING_REQ(_bb, new SC_PING_REQ()); }
  public static SC_PING_REQ GetRootAsSC_PING_REQ(ByteBuffer _bb, SC_PING_REQ obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_PING_REQ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartSC_PING_REQ(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<LoginPacket.SC_PING_REQ> EndSC_PING_REQ(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.SC_PING_REQ>(o);
  }
  public SC_PING_REQT UnPack() {
    var _o = new SC_PING_REQT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SC_PING_REQT _o) {
  }
  public static Offset<LoginPacket.SC_PING_REQ> Pack(FlatBufferBuilder builder, SC_PING_REQT _o) {
    if (_o == null) return default(Offset<LoginPacket.SC_PING_REQ>);
    StartSC_PING_REQ(builder);
    return EndSC_PING_REQ(builder);
  }
};

public class SC_PING_REQT
{

  public SC_PING_REQT() {
  }
}

public struct CS_PING_RES : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CS_PING_RES GetRootAsCS_PING_RES(ByteBuffer _bb) { return GetRootAsCS_PING_RES(_bb, new CS_PING_RES()); }
  public static CS_PING_RES GetRootAsCS_PING_RES(ByteBuffer _bb, CS_PING_RES obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CS_PING_RES __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartCS_PING_RES(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<LoginPacket.CS_PING_RES> EndCS_PING_RES(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.CS_PING_RES>(o);
  }
  public CS_PING_REST UnPack() {
    var _o = new CS_PING_REST();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CS_PING_REST _o) {
  }
  public static Offset<LoginPacket.CS_PING_RES> Pack(FlatBufferBuilder builder, CS_PING_REST _o) {
    if (_o == null) return default(Offset<LoginPacket.CS_PING_RES>);
    StartCS_PING_RES(builder);
    return EndCS_PING_RES(builder);
  }
};

public class CS_PING_REST
{

  public CS_PING_REST() {
  }
}

public struct CS_LOGOUT_NOTI : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CS_LOGOUT_NOTI GetRootAsCS_LOGOUT_NOTI(ByteBuffer _bb) { return GetRootAsCS_LOGOUT_NOTI(_bb, new CS_LOGOUT_NOTI()); }
  public static CS_LOGOUT_NOTI GetRootAsCS_LOGOUT_NOTI(ByteBuffer _bb, CS_LOGOUT_NOTI obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CS_LOGOUT_NOTI __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartCS_LOGOUT_NOTI(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<LoginPacket.CS_LOGOUT_NOTI> EndCS_LOGOUT_NOTI(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.CS_LOGOUT_NOTI>(o);
  }
  public CS_LOGOUT_NOTIT UnPack() {
    var _o = new CS_LOGOUT_NOTIT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CS_LOGOUT_NOTIT _o) {
  }
  public static Offset<LoginPacket.CS_LOGOUT_NOTI> Pack(FlatBufferBuilder builder, CS_LOGOUT_NOTIT _o) {
    if (_o == null) return default(Offset<LoginPacket.CS_LOGOUT_NOTI>);
    StartCS_LOGOUT_NOTI(builder);
    return EndCS_LOGOUT_NOTI(builder);
  }
};

public class CS_LOGOUT_NOTIT
{

  public CS_LOGOUT_NOTIT() {
  }
}

public struct CS_CREATE_CHARACTER_REQ : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CS_CREATE_CHARACTER_REQ GetRootAsCS_CREATE_CHARACTER_REQ(ByteBuffer _bb) { return GetRootAsCS_CREATE_CHARACTER_REQ(_bb, new CS_CREATE_CHARACTER_REQ()); }
  public static CS_CREATE_CHARACTER_REQ GetRootAsCS_CREATE_CHARACTER_REQ(ByteBuffer _bb, CS_CREATE_CHARACTER_REQ obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CS_CREATE_CHARACTER_REQ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public Define.Job Job { get { int o = __p.__offset(6); return o != 0 ? (Define.Job)__p.bb.Get(o + __p.bb_pos) : Define.Job.WARRIOR; } }

  public static Offset<LoginPacket.CS_CREATE_CHARACTER_REQ> CreateCS_CREATE_CHARACTER_REQ(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Define.Job job = Define.Job.WARRIOR) {
    builder.StartTable(2);
    CS_CREATE_CHARACTER_REQ.AddName(builder, nameOffset);
    CS_CREATE_CHARACTER_REQ.AddJob(builder, job);
    return CS_CREATE_CHARACTER_REQ.EndCS_CREATE_CHARACTER_REQ(builder);
  }

  public static void StartCS_CREATE_CHARACTER_REQ(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddJob(FlatBufferBuilder builder, Define.Job job) { builder.AddByte(1, (byte)job, 0); }
  public static Offset<LoginPacket.CS_CREATE_CHARACTER_REQ> EndCS_CREATE_CHARACTER_REQ(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.CS_CREATE_CHARACTER_REQ>(o);
  }
  public CS_CREATE_CHARACTER_REQT UnPack() {
    var _o = new CS_CREATE_CHARACTER_REQT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CS_CREATE_CHARACTER_REQT _o) {
    _o.Name = this.Name;
    _o.Job = this.Job;
  }
  public static Offset<LoginPacket.CS_CREATE_CHARACTER_REQ> Pack(FlatBufferBuilder builder, CS_CREATE_CHARACTER_REQT _o) {
    if (_o == null) return default(Offset<LoginPacket.CS_CREATE_CHARACTER_REQ>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    return CreateCS_CREATE_CHARACTER_REQ(
      builder,
      _name,
      _o.Job);
  }
};

public class CS_CREATE_CHARACTER_REQT
{
  public string Name { get; set; }
  public Define.Job Job { get; set; }

  public CS_CREATE_CHARACTER_REQT() {
    this.Name = null;
    this.Job = Define.Job.WARRIOR;
  }
}

public struct SC_CREATE_CHARACTER_RES : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SC_CREATE_CHARACTER_RES GetRootAsSC_CREATE_CHARACTER_RES(ByteBuffer _bb) { return GetRootAsSC_CREATE_CHARACTER_RES(_bb, new SC_CREATE_CHARACTER_RES()); }
  public static SC_CREATE_CHARACTER_RES GetRootAsSC_CREATE_CHARACTER_RES(ByteBuffer _bb, SC_CREATE_CHARACTER_RES obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_CREATE_CHARACTER_RES __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsSuccess { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public LoginPacket.CharacterInfo? CharacterInfo { get { int o = __p.__offset(6); return o != 0 ? (LoginPacket.CharacterInfo?)(new LoginPacket.CharacterInfo()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<LoginPacket.SC_CREATE_CHARACTER_RES> CreateSC_CREATE_CHARACTER_RES(FlatBufferBuilder builder,
      bool is_success = false,
      Offset<LoginPacket.CharacterInfo> character_infoOffset = default(Offset<LoginPacket.CharacterInfo>)) {
    builder.StartTable(2);
    SC_CREATE_CHARACTER_RES.AddCharacterInfo(builder, character_infoOffset);
    SC_CREATE_CHARACTER_RES.AddIsSuccess(builder, is_success);
    return SC_CREATE_CHARACTER_RES.EndSC_CREATE_CHARACTER_RES(builder);
  }

  public static void StartSC_CREATE_CHARACTER_RES(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddIsSuccess(FlatBufferBuilder builder, bool isSuccess) { builder.AddBool(0, isSuccess, false); }
  public static void AddCharacterInfo(FlatBufferBuilder builder, Offset<LoginPacket.CharacterInfo> characterInfoOffset) { builder.AddOffset(1, characterInfoOffset.Value, 0); }
  public static Offset<LoginPacket.SC_CREATE_CHARACTER_RES> EndSC_CREATE_CHARACTER_RES(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.SC_CREATE_CHARACTER_RES>(o);
  }
  public SC_CREATE_CHARACTER_REST UnPack() {
    var _o = new SC_CREATE_CHARACTER_REST();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SC_CREATE_CHARACTER_REST _o) {
    _o.IsSuccess = this.IsSuccess;
    _o.CharacterInfo = this.CharacterInfo.HasValue ? this.CharacterInfo.Value.UnPack() : null;
  }
  public static Offset<LoginPacket.SC_CREATE_CHARACTER_RES> Pack(FlatBufferBuilder builder, SC_CREATE_CHARACTER_REST _o) {
    if (_o == null) return default(Offset<LoginPacket.SC_CREATE_CHARACTER_RES>);
    var _character_info = _o.CharacterInfo == null ? default(Offset<LoginPacket.CharacterInfo>) : LoginPacket.CharacterInfo.Pack(builder, _o.CharacterInfo);
    return CreateSC_CREATE_CHARACTER_RES(
      builder,
      _o.IsSuccess,
      _character_info);
  }
};

public class SC_CREATE_CHARACTER_REST
{
  public bool IsSuccess { get; set; }
  public LoginPacket.CharacterInfoT CharacterInfo { get; set; }

  public SC_CREATE_CHARACTER_REST() {
    this.IsSuccess = false;
    this.CharacterInfo = null;
  }
}

public struct CS_TEST_REQ : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CS_TEST_REQ GetRootAsCS_TEST_REQ(ByteBuffer _bb) { return GetRootAsCS_TEST_REQ(_bb, new CS_TEST_REQ()); }
  public static CS_TEST_REQ GetRootAsCS_TEST_REQ(ByteBuffer _bb, CS_TEST_REQ obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CS_TEST_REQ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Test { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<LoginPacket.CS_TEST_REQ> CreateCS_TEST_REQ(FlatBufferBuilder builder,
      int test = 0) {
    builder.StartTable(1);
    CS_TEST_REQ.AddTest(builder, test);
    return CS_TEST_REQ.EndCS_TEST_REQ(builder);
  }

  public static void StartCS_TEST_REQ(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTest(FlatBufferBuilder builder, int test) { builder.AddInt(0, test, 0); }
  public static Offset<LoginPacket.CS_TEST_REQ> EndCS_TEST_REQ(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.CS_TEST_REQ>(o);
  }
  public CS_TEST_REQT UnPack() {
    var _o = new CS_TEST_REQT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CS_TEST_REQT _o) {
    _o.Test = this.Test;
  }
  public static Offset<LoginPacket.CS_TEST_REQ> Pack(FlatBufferBuilder builder, CS_TEST_REQT _o) {
    if (_o == null) return default(Offset<LoginPacket.CS_TEST_REQ>);
    return CreateCS_TEST_REQ(
      builder,
      _o.Test);
  }
};

public class CS_TEST_REQT
{
  public int Test { get; set; }

  public CS_TEST_REQT() {
    this.Test = 0;
  }
}

public struct SC_TEST_RES : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SC_TEST_RES GetRootAsSC_TEST_RES(ByteBuffer _bb) { return GetRootAsSC_TEST_RES(_bb, new SC_TEST_RES()); }
  public static SC_TEST_RES GetRootAsSC_TEST_RES(ByteBuffer _bb, SC_TEST_RES obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SC_TEST_RES __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Test { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<LoginPacket.SC_TEST_RES> CreateSC_TEST_RES(FlatBufferBuilder builder,
      int test = 0) {
    builder.StartTable(1);
    SC_TEST_RES.AddTest(builder, test);
    return SC_TEST_RES.EndSC_TEST_RES(builder);
  }

  public static void StartSC_TEST_RES(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTest(FlatBufferBuilder builder, int test) { builder.AddInt(0, test, 0); }
  public static Offset<LoginPacket.SC_TEST_RES> EndSC_TEST_RES(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.SC_TEST_RES>(o);
  }
  public SC_TEST_REST UnPack() {
    var _o = new SC_TEST_REST();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SC_TEST_REST _o) {
    _o.Test = this.Test;
  }
  public static Offset<LoginPacket.SC_TEST_RES> Pack(FlatBufferBuilder builder, SC_TEST_REST _o) {
    if (_o == null) return default(Offset<LoginPacket.SC_TEST_RES>);
    return CreateSC_TEST_RES(
      builder,
      _o.Test);
  }
};

public class SC_TEST_REST
{
  public int Test { get; set; }

  public SC_TEST_REST() {
    this.Test = 0;
  }
}

public struct Root : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Root GetRootAsRoot(ByteBuffer _bb) { return GetRootAsRoot(_bb, new Root()); }
  public static Root GetRootAsRoot(ByteBuffer _bb, Root obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Root __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LoginPacket.Packet PacketType { get { int o = __p.__offset(4); return o != 0 ? (LoginPacket.Packet)__p.bb.Get(o + __p.bb_pos) : LoginPacket.Packet.NONE; } }
  public TTable? Packet<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public LoginPacket.CS_LOGIN_REQ PacketAsCS_LOGIN_REQ() { return Packet<LoginPacket.CS_LOGIN_REQ>().Value; }
  public LoginPacket.SC_LOGIN_RES PacketAsSC_LOGIN_RES() { return Packet<LoginPacket.SC_LOGIN_RES>().Value; }
  public LoginPacket.SC_PING_REQ PacketAsSC_PING_REQ() { return Packet<LoginPacket.SC_PING_REQ>().Value; }
  public LoginPacket.CS_PING_RES PacketAsCS_PING_RES() { return Packet<LoginPacket.CS_PING_RES>().Value; }
  public LoginPacket.CS_LOGOUT_NOTI PacketAsCS_LOGOUT_NOTI() { return Packet<LoginPacket.CS_LOGOUT_NOTI>().Value; }
  public LoginPacket.CS_CREATE_CHARACTER_REQ PacketAsCS_CREATE_CHARACTER_REQ() { return Packet<LoginPacket.CS_CREATE_CHARACTER_REQ>().Value; }
  public LoginPacket.SC_CREATE_CHARACTER_RES PacketAsSC_CREATE_CHARACTER_RES() { return Packet<LoginPacket.SC_CREATE_CHARACTER_RES>().Value; }
  public LoginPacket.CS_TEST_REQ PacketAsCS_TEST_REQ() { return Packet<LoginPacket.CS_TEST_REQ>().Value; }
  public LoginPacket.SC_TEST_RES PacketAsSC_TEST_RES() { return Packet<LoginPacket.SC_TEST_RES>().Value; }

  public static Offset<LoginPacket.Root> CreateRoot(FlatBufferBuilder builder,
      LoginPacket.Packet packet_type = LoginPacket.Packet.NONE,
      int packetOffset = 0) {
    builder.StartTable(2);
    Root.AddPacket(builder, packetOffset);
    Root.AddPacketType(builder, packet_type);
    return Root.EndRoot(builder);
  }

  public static void StartRoot(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPacketType(FlatBufferBuilder builder, LoginPacket.Packet packetType) { builder.AddByte(0, (byte)packetType, 0); }
  public static void AddPacket(FlatBufferBuilder builder, int packetOffset) { builder.AddOffset(1, packetOffset, 0); }
  public static Offset<LoginPacket.Root> EndRoot(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LoginPacket.Root>(o);
  }
  public static void FinishRootBuffer(FlatBufferBuilder builder, Offset<LoginPacket.Root> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRootBuffer(FlatBufferBuilder builder, Offset<LoginPacket.Root> offset) { builder.FinishSizePrefixed(offset.Value); }
  public RootT UnPack() {
    var _o = new RootT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RootT _o) {
    _o.Packet = new LoginPacket.PacketUnion();
    _o.Packet.Type = this.PacketType;
    switch (this.PacketType) {
      default: break;
      case LoginPacket.Packet.CS_LOGIN_REQ:
        _o.Packet.Value = this.Packet<LoginPacket.CS_LOGIN_REQ>().HasValue ? this.Packet<LoginPacket.CS_LOGIN_REQ>().Value.UnPack() : null;
        break;
      case LoginPacket.Packet.SC_LOGIN_RES:
        _o.Packet.Value = this.Packet<LoginPacket.SC_LOGIN_RES>().HasValue ? this.Packet<LoginPacket.SC_LOGIN_RES>().Value.UnPack() : null;
        break;
      case LoginPacket.Packet.SC_PING_REQ:
        _o.Packet.Value = this.Packet<LoginPacket.SC_PING_REQ>().HasValue ? this.Packet<LoginPacket.SC_PING_REQ>().Value.UnPack() : null;
        break;
      case LoginPacket.Packet.CS_PING_RES:
        _o.Packet.Value = this.Packet<LoginPacket.CS_PING_RES>().HasValue ? this.Packet<LoginPacket.CS_PING_RES>().Value.UnPack() : null;
        break;
      case LoginPacket.Packet.CS_LOGOUT_NOTI:
        _o.Packet.Value = this.Packet<LoginPacket.CS_LOGOUT_NOTI>().HasValue ? this.Packet<LoginPacket.CS_LOGOUT_NOTI>().Value.UnPack() : null;
        break;
      case LoginPacket.Packet.CS_CREATE_CHARACTER_REQ:
        _o.Packet.Value = this.Packet<LoginPacket.CS_CREATE_CHARACTER_REQ>().HasValue ? this.Packet<LoginPacket.CS_CREATE_CHARACTER_REQ>().Value.UnPack() : null;
        break;
      case LoginPacket.Packet.SC_CREATE_CHARACTER_RES:
        _o.Packet.Value = this.Packet<LoginPacket.SC_CREATE_CHARACTER_RES>().HasValue ? this.Packet<LoginPacket.SC_CREATE_CHARACTER_RES>().Value.UnPack() : null;
        break;
      case LoginPacket.Packet.CS_TEST_REQ:
        _o.Packet.Value = this.Packet<LoginPacket.CS_TEST_REQ>().HasValue ? this.Packet<LoginPacket.CS_TEST_REQ>().Value.UnPack() : null;
        break;
      case LoginPacket.Packet.SC_TEST_RES:
        _o.Packet.Value = this.Packet<LoginPacket.SC_TEST_RES>().HasValue ? this.Packet<LoginPacket.SC_TEST_RES>().Value.UnPack() : null;
        break;
    }
  }
  public static Offset<LoginPacket.Root> Pack(FlatBufferBuilder builder, RootT _o) {
    if (_o == null) return default(Offset<LoginPacket.Root>);
    var _packet_type = _o.Packet == null ? LoginPacket.Packet.NONE : _o.Packet.Type;
    var _packet = _o.Packet == null ? 0 : LoginPacket.PacketUnion.Pack(builder, _o.Packet);
    return CreateRoot(
      builder,
      _packet_type,
      _packet);
  }
};

public class RootT
{
  public LoginPacket.PacketUnion Packet { get; set; }

  public RootT() {
    this.Packet = null;
  }
  public static RootT DeserializeFromBinary(byte[] fbBuffer) {
    return Root.GetRootAsRoot(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Root.FinishRootBuffer(fbb, Root.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


}
