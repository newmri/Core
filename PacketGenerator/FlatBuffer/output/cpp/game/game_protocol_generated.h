// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEPROTOCOL_GAMEPACKET_H_
#define FLATBUFFERS_GENERATED_GAMEPROTOCOL_GAMEPACKET_H_

#include "flatbuffers/flatbuffers.h"

#include "info_protocol_generated.h"
#include "define_protocol_generated.h"

namespace GamePacket {

struct CS_LOGIN_REQ;
struct CS_LOGIN_REQBuilder;
struct CS_LOGIN_REQT;

struct CharacterInfo;
struct CharacterInfoBuilder;
struct CharacterInfoT;

struct MyCharacterInfo;
struct MyCharacterInfoBuilder;
struct MyCharacterInfoT;

struct SC_LOGIN_RES;
struct SC_LOGIN_RESBuilder;
struct SC_LOGIN_REST;

struct SC_PING_REQ;
struct SC_PING_REQBuilder;
struct SC_PING_REQT;

struct CS_PING_RES;
struct CS_PING_RESBuilder;
struct CS_PING_REST;

struct CS_LOGOUT_NOTI;
struct CS_LOGOUT_NOTIBuilder;
struct CS_LOGOUT_NOTIT;

struct SC_SPAWN_PLAYER_NOTI;
struct SC_SPAWN_PLAYER_NOTIBuilder;
struct SC_SPAWN_PLAYER_NOTIT;

struct SC_DESPAWN_OBJECT_NOTI;
struct SC_DESPAWN_OBJECT_NOTIBuilder;
struct SC_DESPAWN_OBJECT_NOTIT;

struct CS_MOVE_REQ;
struct CS_MOVE_REQBuilder;
struct CS_MOVE_REQT;

struct SC_MOVE_RES;
struct SC_MOVE_RESBuilder;
struct SC_MOVE_REST;

struct CS_SET_STATE_REQ;
struct CS_SET_STATE_REQBuilder;
struct CS_SET_STATE_REQT;

struct SC_SET_STATE_RES;
struct SC_SET_STATE_RESBuilder;
struct SC_SET_STATE_REST;

struct CS_USE_SKILL_REQ;
struct CS_USE_SKILL_REQBuilder;
struct CS_USE_SKILL_REQT;

struct SC_USE_SKILL_RES;
struct SC_USE_SKILL_RESBuilder;
struct SC_USE_SKILL_REST;

struct DamageInfo;
struct DamageInfoBuilder;
struct DamageInfoT;

struct SC_GET_DAMAGE_NOTI;
struct SC_GET_DAMAGE_NOTIBuilder;
struct SC_GET_DAMAGE_NOTIT;

struct CS_REVIVE_REQ;
struct CS_REVIVE_REQBuilder;
struct CS_REVIVE_REQT;

struct SC_REVIVE_RES;
struct SC_REVIVE_RESBuilder;
struct SC_REVIVE_REST;

struct SC_SPAWN_PROJECTILE_NOTI;
struct SC_SPAWN_PROJECTILE_NOTIBuilder;
struct SC_SPAWN_PROJECTILE_NOTIT;

struct Root;
struct RootBuilder;
struct RootT;

enum ErrorCode : int8_t {
  ErrorCode_SUCCESS = 0,
  ErrorCode_UNKNOWN = 1,
  ErrorCode_ALREADY_LOGINED = 2,
  ErrorCode_MIN = ErrorCode_SUCCESS,
  ErrorCode_MAX = ErrorCode_ALREADY_LOGINED
};

inline const ErrorCode (&EnumValuesErrorCode())[3] {
  static const ErrorCode values[] = {
    ErrorCode_SUCCESS,
    ErrorCode_UNKNOWN,
    ErrorCode_ALREADY_LOGINED
  };
  return values;
}

inline const char * const *EnumNamesErrorCode() {
  static const char * const names[4] = {
    "SUCCESS",
    "UNKNOWN",
    "ALREADY_LOGINED",
    nullptr
  };
  return names;
}

inline const char *EnumNameErrorCode(ErrorCode e) {
  if (flatbuffers::IsOutRange(e, ErrorCode_SUCCESS, ErrorCode_ALREADY_LOGINED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesErrorCode()[index];
}

enum Packet : uint8_t {
  Packet_NONE = 0,
  Packet_CS_LOGIN_REQ = 1,
  Packet_SC_LOGIN_RES = 2,
  Packet_SC_PING_REQ = 3,
  Packet_CS_PING_RES = 4,
  Packet_CS_LOGOUT_NOTI = 5,
  Packet_SC_SPAWN_PLAYER_NOTI = 6,
  Packet_SC_DESPAWN_OBJECT_NOTI = 7,
  Packet_CS_MOVE_REQ = 8,
  Packet_SC_MOVE_RES = 9,
  Packet_CS_SET_STATE_REQ = 10,
  Packet_SC_SET_STATE_RES = 11,
  Packet_CS_USE_SKILL_REQ = 12,
  Packet_SC_USE_SKILL_RES = 13,
  Packet_SC_GET_DAMAGE_NOTI = 14,
  Packet_CS_REVIVE_REQ = 15,
  Packet_SC_REVIVE_RES = 16,
  Packet_SC_SPAWN_PROJECTILE_NOTI = 17,
  Packet_MIN = Packet_NONE,
  Packet_MAX = Packet_SC_SPAWN_PROJECTILE_NOTI
};

inline const Packet (&EnumValuesPacket())[18] {
  static const Packet values[] = {
    Packet_NONE,
    Packet_CS_LOGIN_REQ,
    Packet_SC_LOGIN_RES,
    Packet_SC_PING_REQ,
    Packet_CS_PING_RES,
    Packet_CS_LOGOUT_NOTI,
    Packet_SC_SPAWN_PLAYER_NOTI,
    Packet_SC_DESPAWN_OBJECT_NOTI,
    Packet_CS_MOVE_REQ,
    Packet_SC_MOVE_RES,
    Packet_CS_SET_STATE_REQ,
    Packet_SC_SET_STATE_RES,
    Packet_CS_USE_SKILL_REQ,
    Packet_SC_USE_SKILL_RES,
    Packet_SC_GET_DAMAGE_NOTI,
    Packet_CS_REVIVE_REQ,
    Packet_SC_REVIVE_RES,
    Packet_SC_SPAWN_PROJECTILE_NOTI
  };
  return values;
}

inline const char * const *EnumNamesPacket() {
  static const char * const names[19] = {
    "NONE",
    "CS_LOGIN_REQ",
    "SC_LOGIN_RES",
    "SC_PING_REQ",
    "CS_PING_RES",
    "CS_LOGOUT_NOTI",
    "SC_SPAWN_PLAYER_NOTI",
    "SC_DESPAWN_OBJECT_NOTI",
    "CS_MOVE_REQ",
    "SC_MOVE_RES",
    "CS_SET_STATE_REQ",
    "SC_SET_STATE_RES",
    "CS_USE_SKILL_REQ",
    "SC_USE_SKILL_RES",
    "SC_GET_DAMAGE_NOTI",
    "CS_REVIVE_REQ",
    "SC_REVIVE_RES",
    "SC_SPAWN_PROJECTILE_NOTI",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacket(Packet e) {
  if (flatbuffers::IsOutRange(e, Packet_NONE, Packet_SC_SPAWN_PROJECTILE_NOTI)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacket()[index];
}

template<typename T> struct PacketTraits {
  static const Packet enum_value = Packet_NONE;
};

template<> struct PacketTraits<GamePacket::CS_LOGIN_REQ> {
  static const Packet enum_value = Packet_CS_LOGIN_REQ;
};

template<> struct PacketTraits<GamePacket::SC_LOGIN_RES> {
  static const Packet enum_value = Packet_SC_LOGIN_RES;
};

template<> struct PacketTraits<GamePacket::SC_PING_REQ> {
  static const Packet enum_value = Packet_SC_PING_REQ;
};

template<> struct PacketTraits<GamePacket::CS_PING_RES> {
  static const Packet enum_value = Packet_CS_PING_RES;
};

template<> struct PacketTraits<GamePacket::CS_LOGOUT_NOTI> {
  static const Packet enum_value = Packet_CS_LOGOUT_NOTI;
};

template<> struct PacketTraits<GamePacket::SC_SPAWN_PLAYER_NOTI> {
  static const Packet enum_value = Packet_SC_SPAWN_PLAYER_NOTI;
};

template<> struct PacketTraits<GamePacket::SC_DESPAWN_OBJECT_NOTI> {
  static const Packet enum_value = Packet_SC_DESPAWN_OBJECT_NOTI;
};

template<> struct PacketTraits<GamePacket::CS_MOVE_REQ> {
  static const Packet enum_value = Packet_CS_MOVE_REQ;
};

template<> struct PacketTraits<GamePacket::SC_MOVE_RES> {
  static const Packet enum_value = Packet_SC_MOVE_RES;
};

template<> struct PacketTraits<GamePacket::CS_SET_STATE_REQ> {
  static const Packet enum_value = Packet_CS_SET_STATE_REQ;
};

template<> struct PacketTraits<GamePacket::SC_SET_STATE_RES> {
  static const Packet enum_value = Packet_SC_SET_STATE_RES;
};

template<> struct PacketTraits<GamePacket::CS_USE_SKILL_REQ> {
  static const Packet enum_value = Packet_CS_USE_SKILL_REQ;
};

template<> struct PacketTraits<GamePacket::SC_USE_SKILL_RES> {
  static const Packet enum_value = Packet_SC_USE_SKILL_RES;
};

template<> struct PacketTraits<GamePacket::SC_GET_DAMAGE_NOTI> {
  static const Packet enum_value = Packet_SC_GET_DAMAGE_NOTI;
};

template<> struct PacketTraits<GamePacket::CS_REVIVE_REQ> {
  static const Packet enum_value = Packet_CS_REVIVE_REQ;
};

template<> struct PacketTraits<GamePacket::SC_REVIVE_RES> {
  static const Packet enum_value = Packet_SC_REVIVE_RES;
};

template<> struct PacketTraits<GamePacket::SC_SPAWN_PROJECTILE_NOTI> {
  static const Packet enum_value = Packet_SC_SPAWN_PROJECTILE_NOTI;
};

struct PacketUnion {
  Packet type;
  void *value;

  PacketUnion() : type(Packet_NONE), value(nullptr) {}
  PacketUnion(PacketUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(Packet_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  PacketUnion(const PacketUnion &);
  PacketUnion &operator=(const PacketUnion &u)
    { PacketUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  PacketUnion &operator=(PacketUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~PacketUnion() { Reset(); }

  void Reset();

#ifndef FLATBUFFERS_CPP98_STL
  template <typename T>
  void Set(T&& val) {
    using RT = typename std::remove_reference<T>::type;
    Reset();
    type = PacketTraits<typename RT::TableType>::enum_value;
    if (type != Packet_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }
#endif  // FLATBUFFERS_CPP98_STL

  static void *UnPack(const void *obj, Packet type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  GamePacket::CS_LOGIN_REQT *AsCS_LOGIN_REQ() {
    return type == Packet_CS_LOGIN_REQ ?
      reinterpret_cast<GamePacket::CS_LOGIN_REQT *>(value) : nullptr;
  }
  const GamePacket::CS_LOGIN_REQT *AsCS_LOGIN_REQ() const {
    return type == Packet_CS_LOGIN_REQ ?
      reinterpret_cast<const GamePacket::CS_LOGIN_REQT *>(value) : nullptr;
  }
  GamePacket::SC_LOGIN_REST *AsSC_LOGIN_RES() {
    return type == Packet_SC_LOGIN_RES ?
      reinterpret_cast<GamePacket::SC_LOGIN_REST *>(value) : nullptr;
  }
  const GamePacket::SC_LOGIN_REST *AsSC_LOGIN_RES() const {
    return type == Packet_SC_LOGIN_RES ?
      reinterpret_cast<const GamePacket::SC_LOGIN_REST *>(value) : nullptr;
  }
  GamePacket::SC_PING_REQT *AsSC_PING_REQ() {
    return type == Packet_SC_PING_REQ ?
      reinterpret_cast<GamePacket::SC_PING_REQT *>(value) : nullptr;
  }
  const GamePacket::SC_PING_REQT *AsSC_PING_REQ() const {
    return type == Packet_SC_PING_REQ ?
      reinterpret_cast<const GamePacket::SC_PING_REQT *>(value) : nullptr;
  }
  GamePacket::CS_PING_REST *AsCS_PING_RES() {
    return type == Packet_CS_PING_RES ?
      reinterpret_cast<GamePacket::CS_PING_REST *>(value) : nullptr;
  }
  const GamePacket::CS_PING_REST *AsCS_PING_RES() const {
    return type == Packet_CS_PING_RES ?
      reinterpret_cast<const GamePacket::CS_PING_REST *>(value) : nullptr;
  }
  GamePacket::CS_LOGOUT_NOTIT *AsCS_LOGOUT_NOTI() {
    return type == Packet_CS_LOGOUT_NOTI ?
      reinterpret_cast<GamePacket::CS_LOGOUT_NOTIT *>(value) : nullptr;
  }
  const GamePacket::CS_LOGOUT_NOTIT *AsCS_LOGOUT_NOTI() const {
    return type == Packet_CS_LOGOUT_NOTI ?
      reinterpret_cast<const GamePacket::CS_LOGOUT_NOTIT *>(value) : nullptr;
  }
  GamePacket::SC_SPAWN_PLAYER_NOTIT *AsSC_SPAWN_PLAYER_NOTI() {
    return type == Packet_SC_SPAWN_PLAYER_NOTI ?
      reinterpret_cast<GamePacket::SC_SPAWN_PLAYER_NOTIT *>(value) : nullptr;
  }
  const GamePacket::SC_SPAWN_PLAYER_NOTIT *AsSC_SPAWN_PLAYER_NOTI() const {
    return type == Packet_SC_SPAWN_PLAYER_NOTI ?
      reinterpret_cast<const GamePacket::SC_SPAWN_PLAYER_NOTIT *>(value) : nullptr;
  }
  GamePacket::SC_DESPAWN_OBJECT_NOTIT *AsSC_DESPAWN_OBJECT_NOTI() {
    return type == Packet_SC_DESPAWN_OBJECT_NOTI ?
      reinterpret_cast<GamePacket::SC_DESPAWN_OBJECT_NOTIT *>(value) : nullptr;
  }
  const GamePacket::SC_DESPAWN_OBJECT_NOTIT *AsSC_DESPAWN_OBJECT_NOTI() const {
    return type == Packet_SC_DESPAWN_OBJECT_NOTI ?
      reinterpret_cast<const GamePacket::SC_DESPAWN_OBJECT_NOTIT *>(value) : nullptr;
  }
  GamePacket::CS_MOVE_REQT *AsCS_MOVE_REQ() {
    return type == Packet_CS_MOVE_REQ ?
      reinterpret_cast<GamePacket::CS_MOVE_REQT *>(value) : nullptr;
  }
  const GamePacket::CS_MOVE_REQT *AsCS_MOVE_REQ() const {
    return type == Packet_CS_MOVE_REQ ?
      reinterpret_cast<const GamePacket::CS_MOVE_REQT *>(value) : nullptr;
  }
  GamePacket::SC_MOVE_REST *AsSC_MOVE_RES() {
    return type == Packet_SC_MOVE_RES ?
      reinterpret_cast<GamePacket::SC_MOVE_REST *>(value) : nullptr;
  }
  const GamePacket::SC_MOVE_REST *AsSC_MOVE_RES() const {
    return type == Packet_SC_MOVE_RES ?
      reinterpret_cast<const GamePacket::SC_MOVE_REST *>(value) : nullptr;
  }
  GamePacket::CS_SET_STATE_REQT *AsCS_SET_STATE_REQ() {
    return type == Packet_CS_SET_STATE_REQ ?
      reinterpret_cast<GamePacket::CS_SET_STATE_REQT *>(value) : nullptr;
  }
  const GamePacket::CS_SET_STATE_REQT *AsCS_SET_STATE_REQ() const {
    return type == Packet_CS_SET_STATE_REQ ?
      reinterpret_cast<const GamePacket::CS_SET_STATE_REQT *>(value) : nullptr;
  }
  GamePacket::SC_SET_STATE_REST *AsSC_SET_STATE_RES() {
    return type == Packet_SC_SET_STATE_RES ?
      reinterpret_cast<GamePacket::SC_SET_STATE_REST *>(value) : nullptr;
  }
  const GamePacket::SC_SET_STATE_REST *AsSC_SET_STATE_RES() const {
    return type == Packet_SC_SET_STATE_RES ?
      reinterpret_cast<const GamePacket::SC_SET_STATE_REST *>(value) : nullptr;
  }
  GamePacket::CS_USE_SKILL_REQT *AsCS_USE_SKILL_REQ() {
    return type == Packet_CS_USE_SKILL_REQ ?
      reinterpret_cast<GamePacket::CS_USE_SKILL_REQT *>(value) : nullptr;
  }
  const GamePacket::CS_USE_SKILL_REQT *AsCS_USE_SKILL_REQ() const {
    return type == Packet_CS_USE_SKILL_REQ ?
      reinterpret_cast<const GamePacket::CS_USE_SKILL_REQT *>(value) : nullptr;
  }
  GamePacket::SC_USE_SKILL_REST *AsSC_USE_SKILL_RES() {
    return type == Packet_SC_USE_SKILL_RES ?
      reinterpret_cast<GamePacket::SC_USE_SKILL_REST *>(value) : nullptr;
  }
  const GamePacket::SC_USE_SKILL_REST *AsSC_USE_SKILL_RES() const {
    return type == Packet_SC_USE_SKILL_RES ?
      reinterpret_cast<const GamePacket::SC_USE_SKILL_REST *>(value) : nullptr;
  }
  GamePacket::SC_GET_DAMAGE_NOTIT *AsSC_GET_DAMAGE_NOTI() {
    return type == Packet_SC_GET_DAMAGE_NOTI ?
      reinterpret_cast<GamePacket::SC_GET_DAMAGE_NOTIT *>(value) : nullptr;
  }
  const GamePacket::SC_GET_DAMAGE_NOTIT *AsSC_GET_DAMAGE_NOTI() const {
    return type == Packet_SC_GET_DAMAGE_NOTI ?
      reinterpret_cast<const GamePacket::SC_GET_DAMAGE_NOTIT *>(value) : nullptr;
  }
  GamePacket::CS_REVIVE_REQT *AsCS_REVIVE_REQ() {
    return type == Packet_CS_REVIVE_REQ ?
      reinterpret_cast<GamePacket::CS_REVIVE_REQT *>(value) : nullptr;
  }
  const GamePacket::CS_REVIVE_REQT *AsCS_REVIVE_REQ() const {
    return type == Packet_CS_REVIVE_REQ ?
      reinterpret_cast<const GamePacket::CS_REVIVE_REQT *>(value) : nullptr;
  }
  GamePacket::SC_REVIVE_REST *AsSC_REVIVE_RES() {
    return type == Packet_SC_REVIVE_RES ?
      reinterpret_cast<GamePacket::SC_REVIVE_REST *>(value) : nullptr;
  }
  const GamePacket::SC_REVIVE_REST *AsSC_REVIVE_RES() const {
    return type == Packet_SC_REVIVE_RES ?
      reinterpret_cast<const GamePacket::SC_REVIVE_REST *>(value) : nullptr;
  }
  GamePacket::SC_SPAWN_PROJECTILE_NOTIT *AsSC_SPAWN_PROJECTILE_NOTI() {
    return type == Packet_SC_SPAWN_PROJECTILE_NOTI ?
      reinterpret_cast<GamePacket::SC_SPAWN_PROJECTILE_NOTIT *>(value) : nullptr;
  }
  const GamePacket::SC_SPAWN_PROJECTILE_NOTIT *AsSC_SPAWN_PROJECTILE_NOTI() const {
    return type == Packet_SC_SPAWN_PROJECTILE_NOTI ?
      reinterpret_cast<const GamePacket::SC_SPAWN_PROJECTILE_NOTIT *>(value) : nullptr;
  }
};

bool VerifyPacket(flatbuffers::Verifier &verifier, const void *obj, Packet type);
bool VerifyPacketVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum CharacterInfoBase : uint8_t {
  CharacterInfoBase_NONE = 0,
  CharacterInfoBase_CharacterInfo = 1,
  CharacterInfoBase_MyCharacterInfo = 2,
  CharacterInfoBase_MIN = CharacterInfoBase_NONE,
  CharacterInfoBase_MAX = CharacterInfoBase_MyCharacterInfo
};

inline const CharacterInfoBase (&EnumValuesCharacterInfoBase())[3] {
  static const CharacterInfoBase values[] = {
    CharacterInfoBase_NONE,
    CharacterInfoBase_CharacterInfo,
    CharacterInfoBase_MyCharacterInfo
  };
  return values;
}

inline const char * const *EnumNamesCharacterInfoBase() {
  static const char * const names[4] = {
    "NONE",
    "CharacterInfo",
    "MyCharacterInfo",
    nullptr
  };
  return names;
}

inline const char *EnumNameCharacterInfoBase(CharacterInfoBase e) {
  if (flatbuffers::IsOutRange(e, CharacterInfoBase_NONE, CharacterInfoBase_MyCharacterInfo)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCharacterInfoBase()[index];
}

template<typename T> struct CharacterInfoBaseTraits {
  static const CharacterInfoBase enum_value = CharacterInfoBase_NONE;
};

template<> struct CharacterInfoBaseTraits<GamePacket::CharacterInfo> {
  static const CharacterInfoBase enum_value = CharacterInfoBase_CharacterInfo;
};

template<> struct CharacterInfoBaseTraits<GamePacket::MyCharacterInfo> {
  static const CharacterInfoBase enum_value = CharacterInfoBase_MyCharacterInfo;
};

struct CharacterInfoBaseUnion {
  CharacterInfoBase type;
  void *value;

  CharacterInfoBaseUnion() : type(CharacterInfoBase_NONE), value(nullptr) {}
  CharacterInfoBaseUnion(CharacterInfoBaseUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(CharacterInfoBase_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  CharacterInfoBaseUnion(const CharacterInfoBaseUnion &);
  CharacterInfoBaseUnion &operator=(const CharacterInfoBaseUnion &u)
    { CharacterInfoBaseUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  CharacterInfoBaseUnion &operator=(CharacterInfoBaseUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~CharacterInfoBaseUnion() { Reset(); }

  void Reset();

#ifndef FLATBUFFERS_CPP98_STL
  template <typename T>
  void Set(T&& val) {
    using RT = typename std::remove_reference<T>::type;
    Reset();
    type = CharacterInfoBaseTraits<typename RT::TableType>::enum_value;
    if (type != CharacterInfoBase_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }
#endif  // FLATBUFFERS_CPP98_STL

  static void *UnPack(const void *obj, CharacterInfoBase type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  GamePacket::CharacterInfoT *AsCharacterInfo() {
    return type == CharacterInfoBase_CharacterInfo ?
      reinterpret_cast<GamePacket::CharacterInfoT *>(value) : nullptr;
  }
  const GamePacket::CharacterInfoT *AsCharacterInfo() const {
    return type == CharacterInfoBase_CharacterInfo ?
      reinterpret_cast<const GamePacket::CharacterInfoT *>(value) : nullptr;
  }
  GamePacket::MyCharacterInfoT *AsMyCharacterInfo() {
    return type == CharacterInfoBase_MyCharacterInfo ?
      reinterpret_cast<GamePacket::MyCharacterInfoT *>(value) : nullptr;
  }
  const GamePacket::MyCharacterInfoT *AsMyCharacterInfo() const {
    return type == CharacterInfoBase_MyCharacterInfo ?
      reinterpret_cast<const GamePacket::MyCharacterInfoT *>(value) : nullptr;
  }
};

bool VerifyCharacterInfoBase(flatbuffers::Verifier &verifier, const void *obj, CharacterInfoBase type);
bool VerifyCharacterInfoBaseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct CS_LOGIN_REQT : public flatbuffers::NativeTable {
  typedef CS_LOGIN_REQ TableType;
  int64_t uid = 0;
  int64_t character_uid = 0;
  int32_t token = 0;
};

struct CS_LOGIN_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CS_LOGIN_REQT NativeTableType;
  typedef CS_LOGIN_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UID = 4,
    VT_CHARACTER_UID = 6,
    VT_TOKEN = 8
  };
  int64_t uid() const {
    return GetField<int64_t>(VT_UID, 0);
  }
  int64_t character_uid() const {
    return GetField<int64_t>(VT_CHARACTER_UID, 0);
  }
  int32_t token() const {
    return GetField<int32_t>(VT_TOKEN, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_UID) &&
           VerifyField<int64_t>(verifier, VT_CHARACTER_UID) &&
           VerifyField<int32_t>(verifier, VT_TOKEN) &&
           verifier.EndTable();
  }
  CS_LOGIN_REQT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CS_LOGIN_REQT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CS_LOGIN_REQ> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_LOGIN_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CS_LOGIN_REQBuilder {
  typedef CS_LOGIN_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(int64_t uid) {
    fbb_.AddElement<int64_t>(CS_LOGIN_REQ::VT_UID, uid, 0);
  }
  void add_character_uid(int64_t character_uid) {
    fbb_.AddElement<int64_t>(CS_LOGIN_REQ::VT_CHARACTER_UID, character_uid, 0);
  }
  void add_token(int32_t token) {
    fbb_.AddElement<int32_t>(CS_LOGIN_REQ::VT_TOKEN, token, 0);
  }
  explicit CS_LOGIN_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CS_LOGIN_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CS_LOGIN_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<CS_LOGIN_REQ> CreateCS_LOGIN_REQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t uid = 0,
    int64_t character_uid = 0,
    int32_t token = 0) {
  CS_LOGIN_REQBuilder builder_(_fbb);
  builder_.add_character_uid(character_uid);
  builder_.add_uid(uid);
  builder_.add_token(token);
  return builder_.Finish();
}

flatbuffers::Offset<CS_LOGIN_REQ> CreateCS_LOGIN_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_LOGIN_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CharacterInfoT : public flatbuffers::NativeTable {
  typedef CharacterInfo TableType;
  std::string name{};
  Define::Job job = Define::Job_WARRIOR;
  NativeInfo::CharacterGear gear{};
};

struct CharacterInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CharacterInfoT NativeTableType;
  typedef CharacterInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_JOB = 6,
    VT_GEAR = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  Define::Job job() const {
    return static_cast<Define::Job>(GetField<uint8_t>(VT_JOB, 0));
  }
  const Info::CharacterGear *gear() const {
    return GetStruct<const Info::CharacterGear *>(VT_GEAR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_JOB) &&
           VerifyField<Info::CharacterGear>(verifier, VT_GEAR) &&
           verifier.EndTable();
  }
  CharacterInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CharacterInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CharacterInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CharacterInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CharacterInfoBuilder {
  typedef CharacterInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CharacterInfo::VT_NAME, name);
  }
  void add_job(Define::Job job) {
    fbb_.AddElement<uint8_t>(CharacterInfo::VT_JOB, static_cast<uint8_t>(job), 0);
  }
  void add_gear(const Info::CharacterGear *gear) {
    fbb_.AddStruct(CharacterInfo::VT_GEAR, gear);
  }
  explicit CharacterInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CharacterInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CharacterInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<CharacterInfo> CreateCharacterInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    Define::Job job = Define::Job_WARRIOR,
    const Info::CharacterGear *gear = 0) {
  CharacterInfoBuilder builder_(_fbb);
  builder_.add_gear(gear);
  builder_.add_name(name);
  builder_.add_job(job);
  return builder_.Finish();
}

inline flatbuffers::Offset<CharacterInfo> CreateCharacterInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Define::Job job = Define::Job_WARRIOR,
    const Info::CharacterGear *gear = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return GamePacket::CreateCharacterInfo(
      _fbb,
      name__,
      job,
      gear);
}

flatbuffers::Offset<CharacterInfo> CreateCharacterInfo(flatbuffers::FlatBufferBuilder &_fbb, const CharacterInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MyCharacterInfoT : public flatbuffers::NativeTable {
  typedef MyCharacterInfo TableType;
  std::string name{};
  Define::Job job = Define::Job_WARRIOR;
  NativeInfo::CharacterGear gear{};
  int32_t bonus_stat = 0;
};

struct MyCharacterInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MyCharacterInfoT NativeTableType;
  typedef MyCharacterInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_JOB = 6,
    VT_GEAR = 8,
    VT_BONUS_STAT = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  Define::Job job() const {
    return static_cast<Define::Job>(GetField<uint8_t>(VT_JOB, 0));
  }
  const Info::CharacterGear *gear() const {
    return GetStruct<const Info::CharacterGear *>(VT_GEAR);
  }
  int32_t bonus_stat() const {
    return GetField<int32_t>(VT_BONUS_STAT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_JOB) &&
           VerifyField<Info::CharacterGear>(verifier, VT_GEAR) &&
           VerifyField<int32_t>(verifier, VT_BONUS_STAT) &&
           verifier.EndTable();
  }
  MyCharacterInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MyCharacterInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MyCharacterInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MyCharacterInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MyCharacterInfoBuilder {
  typedef MyCharacterInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MyCharacterInfo::VT_NAME, name);
  }
  void add_job(Define::Job job) {
    fbb_.AddElement<uint8_t>(MyCharacterInfo::VT_JOB, static_cast<uint8_t>(job), 0);
  }
  void add_gear(const Info::CharacterGear *gear) {
    fbb_.AddStruct(MyCharacterInfo::VT_GEAR, gear);
  }
  void add_bonus_stat(int32_t bonus_stat) {
    fbb_.AddElement<int32_t>(MyCharacterInfo::VT_BONUS_STAT, bonus_stat, 0);
  }
  explicit MyCharacterInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MyCharacterInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MyCharacterInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<MyCharacterInfo> CreateMyCharacterInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    Define::Job job = Define::Job_WARRIOR,
    const Info::CharacterGear *gear = 0,
    int32_t bonus_stat = 0) {
  MyCharacterInfoBuilder builder_(_fbb);
  builder_.add_bonus_stat(bonus_stat);
  builder_.add_gear(gear);
  builder_.add_name(name);
  builder_.add_job(job);
  return builder_.Finish();
}

inline flatbuffers::Offset<MyCharacterInfo> CreateMyCharacterInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Define::Job job = Define::Job_WARRIOR,
    const Info::CharacterGear *gear = 0,
    int32_t bonus_stat = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return GamePacket::CreateMyCharacterInfo(
      _fbb,
      name__,
      job,
      gear,
      bonus_stat);
}

flatbuffers::Offset<MyCharacterInfo> CreateMyCharacterInfo(flatbuffers::FlatBufferBuilder &_fbb, const MyCharacterInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_LOGIN_REST : public flatbuffers::NativeTable {
  typedef SC_LOGIN_RES TableType;
  GamePacket::ErrorCode result = GamePacket::ErrorCode_SUCCESS;
  std::unique_ptr<Info::ObjectInfoT> object_info{};
  std::unique_ptr<Info::CreatureInfoT> creature_info{};
  std::unique_ptr<GamePacket::MyCharacterInfoT> character_info{};
  std::unique_ptr<Info::MoneyWrapperT> money{};
};

struct SC_LOGIN_RES FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_LOGIN_REST NativeTableType;
  typedef SC_LOGIN_RESBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT = 4,
    VT_OBJECT_INFO = 6,
    VT_CREATURE_INFO = 8,
    VT_CHARACTER_INFO = 10,
    VT_MONEY = 12
  };
  GamePacket::ErrorCode result() const {
    return static_cast<GamePacket::ErrorCode>(GetField<int8_t>(VT_RESULT, 0));
  }
  const Info::ObjectInfo *object_info() const {
    return GetPointer<const Info::ObjectInfo *>(VT_OBJECT_INFO);
  }
  const Info::CreatureInfo *creature_info() const {
    return GetPointer<const Info::CreatureInfo *>(VT_CREATURE_INFO);
  }
  const GamePacket::MyCharacterInfo *character_info() const {
    return GetPointer<const GamePacket::MyCharacterInfo *>(VT_CHARACTER_INFO);
  }
  const Info::MoneyWrapper *money() const {
    return GetPointer<const Info::MoneyWrapper *>(VT_MONEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_RESULT) &&
           VerifyOffset(verifier, VT_OBJECT_INFO) &&
           verifier.VerifyTable(object_info()) &&
           VerifyOffset(verifier, VT_CREATURE_INFO) &&
           verifier.VerifyTable(creature_info()) &&
           VerifyOffset(verifier, VT_CHARACTER_INFO) &&
           verifier.VerifyTable(character_info()) &&
           VerifyOffset(verifier, VT_MONEY) &&
           verifier.VerifyTable(money()) &&
           verifier.EndTable();
  }
  SC_LOGIN_REST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_LOGIN_REST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_LOGIN_RES> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_LOGIN_REST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_LOGIN_RESBuilder {
  typedef SC_LOGIN_RES Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_result(GamePacket::ErrorCode result) {
    fbb_.AddElement<int8_t>(SC_LOGIN_RES::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  void add_object_info(flatbuffers::Offset<Info::ObjectInfo> object_info) {
    fbb_.AddOffset(SC_LOGIN_RES::VT_OBJECT_INFO, object_info);
  }
  void add_creature_info(flatbuffers::Offset<Info::CreatureInfo> creature_info) {
    fbb_.AddOffset(SC_LOGIN_RES::VT_CREATURE_INFO, creature_info);
  }
  void add_character_info(flatbuffers::Offset<GamePacket::MyCharacterInfo> character_info) {
    fbb_.AddOffset(SC_LOGIN_RES::VT_CHARACTER_INFO, character_info);
  }
  void add_money(flatbuffers::Offset<Info::MoneyWrapper> money) {
    fbb_.AddOffset(SC_LOGIN_RES::VT_MONEY, money);
  }
  explicit SC_LOGIN_RESBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_LOGIN_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_LOGIN_RES>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_LOGIN_RES> CreateSC_LOGIN_RES(
    flatbuffers::FlatBufferBuilder &_fbb,
    GamePacket::ErrorCode result = GamePacket::ErrorCode_SUCCESS,
    flatbuffers::Offset<Info::ObjectInfo> object_info = 0,
    flatbuffers::Offset<Info::CreatureInfo> creature_info = 0,
    flatbuffers::Offset<GamePacket::MyCharacterInfo> character_info = 0,
    flatbuffers::Offset<Info::MoneyWrapper> money = 0) {
  SC_LOGIN_RESBuilder builder_(_fbb);
  builder_.add_money(money);
  builder_.add_character_info(character_info);
  builder_.add_creature_info(creature_info);
  builder_.add_object_info(object_info);
  builder_.add_result(result);
  return builder_.Finish();
}

flatbuffers::Offset<SC_LOGIN_RES> CreateSC_LOGIN_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_LOGIN_REST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_PING_REQT : public flatbuffers::NativeTable {
  typedef SC_PING_REQ TableType;
};

struct SC_PING_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_PING_REQT NativeTableType;
  typedef SC_PING_REQBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  SC_PING_REQT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_PING_REQT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_PING_REQ> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_PING_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_PING_REQBuilder {
  typedef SC_PING_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit SC_PING_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_PING_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_PING_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_PING_REQ> CreateSC_PING_REQ(
    flatbuffers::FlatBufferBuilder &_fbb) {
  SC_PING_REQBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<SC_PING_REQ> CreateSC_PING_REQ(flatbuffers::FlatBufferBuilder &_fbb, const SC_PING_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CS_PING_REST : public flatbuffers::NativeTable {
  typedef CS_PING_RES TableType;
};

struct CS_PING_RES FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CS_PING_REST NativeTableType;
  typedef CS_PING_RESBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  CS_PING_REST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CS_PING_REST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CS_PING_RES> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_PING_REST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CS_PING_RESBuilder {
  typedef CS_PING_RES Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit CS_PING_RESBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CS_PING_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CS_PING_RES>(end);
    return o;
  }
};

inline flatbuffers::Offset<CS_PING_RES> CreateCS_PING_RES(
    flatbuffers::FlatBufferBuilder &_fbb) {
  CS_PING_RESBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<CS_PING_RES> CreateCS_PING_RES(flatbuffers::FlatBufferBuilder &_fbb, const CS_PING_REST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CS_LOGOUT_NOTIT : public flatbuffers::NativeTable {
  typedef CS_LOGOUT_NOTI TableType;
};

struct CS_LOGOUT_NOTI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CS_LOGOUT_NOTIT NativeTableType;
  typedef CS_LOGOUT_NOTIBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  CS_LOGOUT_NOTIT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CS_LOGOUT_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CS_LOGOUT_NOTI> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_LOGOUT_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CS_LOGOUT_NOTIBuilder {
  typedef CS_LOGOUT_NOTI Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit CS_LOGOUT_NOTIBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CS_LOGOUT_NOTI> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CS_LOGOUT_NOTI>(end);
    return o;
  }
};

inline flatbuffers::Offset<CS_LOGOUT_NOTI> CreateCS_LOGOUT_NOTI(
    flatbuffers::FlatBufferBuilder &_fbb) {
  CS_LOGOUT_NOTIBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<CS_LOGOUT_NOTI> CreateCS_LOGOUT_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const CS_LOGOUT_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_SPAWN_PLAYER_NOTIT : public flatbuffers::NativeTable {
  typedef SC_SPAWN_PLAYER_NOTI TableType;
  std::unique_ptr<Info::ObjectInfoT> object_info{};
  std::unique_ptr<Info::CreatureInfoT> creature_info{};
  std::unique_ptr<GamePacket::CharacterInfoT> character_info{};
};

struct SC_SPAWN_PLAYER_NOTI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_SPAWN_PLAYER_NOTIT NativeTableType;
  typedef SC_SPAWN_PLAYER_NOTIBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_INFO = 4,
    VT_CREATURE_INFO = 6,
    VT_CHARACTER_INFO = 8
  };
  const Info::ObjectInfo *object_info() const {
    return GetPointer<const Info::ObjectInfo *>(VT_OBJECT_INFO);
  }
  const Info::CreatureInfo *creature_info() const {
    return GetPointer<const Info::CreatureInfo *>(VT_CREATURE_INFO);
  }
  const GamePacket::CharacterInfo *character_info() const {
    return GetPointer<const GamePacket::CharacterInfo *>(VT_CHARACTER_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_INFO) &&
           verifier.VerifyTable(object_info()) &&
           VerifyOffset(verifier, VT_CREATURE_INFO) &&
           verifier.VerifyTable(creature_info()) &&
           VerifyOffset(verifier, VT_CHARACTER_INFO) &&
           verifier.VerifyTable(character_info()) &&
           verifier.EndTable();
  }
  SC_SPAWN_PLAYER_NOTIT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_SPAWN_PLAYER_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_SPAWN_PLAYER_NOTI> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_SPAWN_PLAYER_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_SPAWN_PLAYER_NOTIBuilder {
  typedef SC_SPAWN_PLAYER_NOTI Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_info(flatbuffers::Offset<Info::ObjectInfo> object_info) {
    fbb_.AddOffset(SC_SPAWN_PLAYER_NOTI::VT_OBJECT_INFO, object_info);
  }
  void add_creature_info(flatbuffers::Offset<Info::CreatureInfo> creature_info) {
    fbb_.AddOffset(SC_SPAWN_PLAYER_NOTI::VT_CREATURE_INFO, creature_info);
  }
  void add_character_info(flatbuffers::Offset<GamePacket::CharacterInfo> character_info) {
    fbb_.AddOffset(SC_SPAWN_PLAYER_NOTI::VT_CHARACTER_INFO, character_info);
  }
  explicit SC_SPAWN_PLAYER_NOTIBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_SPAWN_PLAYER_NOTI> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_SPAWN_PLAYER_NOTI>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_SPAWN_PLAYER_NOTI> CreateSC_SPAWN_PLAYER_NOTI(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Info::ObjectInfo> object_info = 0,
    flatbuffers::Offset<Info::CreatureInfo> creature_info = 0,
    flatbuffers::Offset<GamePacket::CharacterInfo> character_info = 0) {
  SC_SPAWN_PLAYER_NOTIBuilder builder_(_fbb);
  builder_.add_character_info(character_info);
  builder_.add_creature_info(creature_info);
  builder_.add_object_info(object_info);
  return builder_.Finish();
}

flatbuffers::Offset<SC_SPAWN_PLAYER_NOTI> CreateSC_SPAWN_PLAYER_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const SC_SPAWN_PLAYER_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_DESPAWN_OBJECT_NOTIT : public flatbuffers::NativeTable {
  typedef SC_DESPAWN_OBJECT_NOTI TableType;
  Define::ObjectType object_type = Define::ObjectType_NONE;
  int64_t oid = 0;
};

struct SC_DESPAWN_OBJECT_NOTI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_DESPAWN_OBJECT_NOTIT NativeTableType;
  typedef SC_DESPAWN_OBJECT_NOTIBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_TYPE = 4,
    VT_OID = 6
  };
  Define::ObjectType object_type() const {
    return static_cast<Define::ObjectType>(GetField<uint8_t>(VT_OBJECT_TYPE, 0));
  }
  int64_t oid() const {
    return GetField<int64_t>(VT_OID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OBJECT_TYPE) &&
           VerifyField<int64_t>(verifier, VT_OID) &&
           verifier.EndTable();
  }
  SC_DESPAWN_OBJECT_NOTIT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_DESPAWN_OBJECT_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_DESPAWN_OBJECT_NOTI> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_DESPAWN_OBJECT_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_DESPAWN_OBJECT_NOTIBuilder {
  typedef SC_DESPAWN_OBJECT_NOTI Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_type(Define::ObjectType object_type) {
    fbb_.AddElement<uint8_t>(SC_DESPAWN_OBJECT_NOTI::VT_OBJECT_TYPE, static_cast<uint8_t>(object_type), 0);
  }
  void add_oid(int64_t oid) {
    fbb_.AddElement<int64_t>(SC_DESPAWN_OBJECT_NOTI::VT_OID, oid, 0);
  }
  explicit SC_DESPAWN_OBJECT_NOTIBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_DESPAWN_OBJECT_NOTI> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_DESPAWN_OBJECT_NOTI>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_DESPAWN_OBJECT_NOTI> CreateSC_DESPAWN_OBJECT_NOTI(
    flatbuffers::FlatBufferBuilder &_fbb,
    Define::ObjectType object_type = Define::ObjectType_NONE,
    int64_t oid = 0) {
  SC_DESPAWN_OBJECT_NOTIBuilder builder_(_fbb);
  builder_.add_oid(oid);
  builder_.add_object_type(object_type);
  return builder_.Finish();
}

flatbuffers::Offset<SC_DESPAWN_OBJECT_NOTI> CreateSC_DESPAWN_OBJECT_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const SC_DESPAWN_OBJECT_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CS_MOVE_REQT : public flatbuffers::NativeTable {
  typedef CS_MOVE_REQ TableType;
  bool is_run = false;
  NativeInfo::PositionInfo pos_info{};
};

struct CS_MOVE_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CS_MOVE_REQT NativeTableType;
  typedef CS_MOVE_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IS_RUN = 4,
    VT_POS_INFO = 6
  };
  bool is_run() const {
    return GetField<uint8_t>(VT_IS_RUN, 0) != 0;
  }
  const Info::PositionInfo *pos_info() const {
    return GetStruct<const Info::PositionInfo *>(VT_POS_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_IS_RUN) &&
           VerifyField<Info::PositionInfo>(verifier, VT_POS_INFO) &&
           verifier.EndTable();
  }
  CS_MOVE_REQT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CS_MOVE_REQT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CS_MOVE_REQ> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_MOVE_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CS_MOVE_REQBuilder {
  typedef CS_MOVE_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_is_run(bool is_run) {
    fbb_.AddElement<uint8_t>(CS_MOVE_REQ::VT_IS_RUN, static_cast<uint8_t>(is_run), 0);
  }
  void add_pos_info(const Info::PositionInfo *pos_info) {
    fbb_.AddStruct(CS_MOVE_REQ::VT_POS_INFO, pos_info);
  }
  explicit CS_MOVE_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CS_MOVE_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CS_MOVE_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<CS_MOVE_REQ> CreateCS_MOVE_REQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool is_run = false,
    const Info::PositionInfo *pos_info = 0) {
  CS_MOVE_REQBuilder builder_(_fbb);
  builder_.add_pos_info(pos_info);
  builder_.add_is_run(is_run);
  return builder_.Finish();
}

flatbuffers::Offset<CS_MOVE_REQ> CreateCS_MOVE_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_MOVE_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_MOVE_REST : public flatbuffers::NativeTable {
  typedef SC_MOVE_RES TableType;
  std::unique_ptr<Info::ObjectInfoT> object_info{};
};

struct SC_MOVE_RES FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_MOVE_REST NativeTableType;
  typedef SC_MOVE_RESBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_INFO = 4
  };
  const Info::ObjectInfo *object_info() const {
    return GetPointer<const Info::ObjectInfo *>(VT_OBJECT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_INFO) &&
           verifier.VerifyTable(object_info()) &&
           verifier.EndTable();
  }
  SC_MOVE_REST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_MOVE_REST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_MOVE_RES> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_MOVE_REST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_MOVE_RESBuilder {
  typedef SC_MOVE_RES Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_info(flatbuffers::Offset<Info::ObjectInfo> object_info) {
    fbb_.AddOffset(SC_MOVE_RES::VT_OBJECT_INFO, object_info);
  }
  explicit SC_MOVE_RESBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_MOVE_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_MOVE_RES>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_MOVE_RES> CreateSC_MOVE_RES(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Info::ObjectInfo> object_info = 0) {
  SC_MOVE_RESBuilder builder_(_fbb);
  builder_.add_object_info(object_info);
  return builder_.Finish();
}

flatbuffers::Offset<SC_MOVE_RES> CreateSC_MOVE_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_MOVE_REST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CS_SET_STATE_REQT : public flatbuffers::NativeTable {
  typedef CS_SET_STATE_REQ TableType;
  Define::ObjectState state = Define::ObjectState_IDLE;
};

struct CS_SET_STATE_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CS_SET_STATE_REQT NativeTableType;
  typedef CS_SET_STATE_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4
  };
  Define::ObjectState state() const {
    return static_cast<Define::ObjectState>(GetField<uint8_t>(VT_STATE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
  CS_SET_STATE_REQT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CS_SET_STATE_REQT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CS_SET_STATE_REQ> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_SET_STATE_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CS_SET_STATE_REQBuilder {
  typedef CS_SET_STATE_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(Define::ObjectState state) {
    fbb_.AddElement<uint8_t>(CS_SET_STATE_REQ::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit CS_SET_STATE_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CS_SET_STATE_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CS_SET_STATE_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<CS_SET_STATE_REQ> CreateCS_SET_STATE_REQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    Define::ObjectState state = Define::ObjectState_IDLE) {
  CS_SET_STATE_REQBuilder builder_(_fbb);
  builder_.add_state(state);
  return builder_.Finish();
}

flatbuffers::Offset<CS_SET_STATE_REQ> CreateCS_SET_STATE_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_SET_STATE_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_SET_STATE_REST : public flatbuffers::NativeTable {
  typedef SC_SET_STATE_RES TableType;
  Define::ObjectType object_type = Define::ObjectType_NONE;
  int64_t object_id = 0;
  Define::ObjectState state = Define::ObjectState_IDLE;
};

struct SC_SET_STATE_RES FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_SET_STATE_REST NativeTableType;
  typedef SC_SET_STATE_RESBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_TYPE = 4,
    VT_OBJECT_ID = 6,
    VT_STATE = 8
  };
  Define::ObjectType object_type() const {
    return static_cast<Define::ObjectType>(GetField<uint8_t>(VT_OBJECT_TYPE, 0));
  }
  int64_t object_id() const {
    return GetField<int64_t>(VT_OBJECT_ID, 0);
  }
  Define::ObjectState state() const {
    return static_cast<Define::ObjectState>(GetField<uint8_t>(VT_STATE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OBJECT_TYPE) &&
           VerifyField<int64_t>(verifier, VT_OBJECT_ID) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
  SC_SET_STATE_REST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_SET_STATE_REST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_SET_STATE_RES> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_SET_STATE_REST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_SET_STATE_RESBuilder {
  typedef SC_SET_STATE_RES Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_type(Define::ObjectType object_type) {
    fbb_.AddElement<uint8_t>(SC_SET_STATE_RES::VT_OBJECT_TYPE, static_cast<uint8_t>(object_type), 0);
  }
  void add_object_id(int64_t object_id) {
    fbb_.AddElement<int64_t>(SC_SET_STATE_RES::VT_OBJECT_ID, object_id, 0);
  }
  void add_state(Define::ObjectState state) {
    fbb_.AddElement<uint8_t>(SC_SET_STATE_RES::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  explicit SC_SET_STATE_RESBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_SET_STATE_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_SET_STATE_RES>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_SET_STATE_RES> CreateSC_SET_STATE_RES(
    flatbuffers::FlatBufferBuilder &_fbb,
    Define::ObjectType object_type = Define::ObjectType_NONE,
    int64_t object_id = 0,
    Define::ObjectState state = Define::ObjectState_IDLE) {
  SC_SET_STATE_RESBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  builder_.add_state(state);
  builder_.add_object_type(object_type);
  return builder_.Finish();
}

flatbuffers::Offset<SC_SET_STATE_RES> CreateSC_SET_STATE_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_SET_STATE_REST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CS_USE_SKILL_REQT : public flatbuffers::NativeTable {
  typedef CS_USE_SKILL_REQ TableType;
  int32_t skill_id = 0;
};

struct CS_USE_SKILL_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CS_USE_SKILL_REQT NativeTableType;
  typedef CS_USE_SKILL_REQBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SKILL_ID = 4
  };
  int32_t skill_id() const {
    return GetField<int32_t>(VT_SKILL_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SKILL_ID) &&
           verifier.EndTable();
  }
  CS_USE_SKILL_REQT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CS_USE_SKILL_REQT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CS_USE_SKILL_REQ> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_USE_SKILL_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CS_USE_SKILL_REQBuilder {
  typedef CS_USE_SKILL_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_skill_id(int32_t skill_id) {
    fbb_.AddElement<int32_t>(CS_USE_SKILL_REQ::VT_SKILL_ID, skill_id, 0);
  }
  explicit CS_USE_SKILL_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CS_USE_SKILL_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CS_USE_SKILL_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<CS_USE_SKILL_REQ> CreateCS_USE_SKILL_REQ(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t skill_id = 0) {
  CS_USE_SKILL_REQBuilder builder_(_fbb);
  builder_.add_skill_id(skill_id);
  return builder_.Finish();
}

flatbuffers::Offset<CS_USE_SKILL_REQ> CreateCS_USE_SKILL_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_USE_SKILL_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_USE_SKILL_REST : public flatbuffers::NativeTable {
  typedef SC_USE_SKILL_RES TableType;
  Define::ObjectType object_type = Define::ObjectType_NONE;
  int64_t object_id = 0;
  int32_t skill_id = 0;
};

struct SC_USE_SKILL_RES FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_USE_SKILL_REST NativeTableType;
  typedef SC_USE_SKILL_RESBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_TYPE = 4,
    VT_OBJECT_ID = 6,
    VT_SKILL_ID = 8
  };
  Define::ObjectType object_type() const {
    return static_cast<Define::ObjectType>(GetField<uint8_t>(VT_OBJECT_TYPE, 0));
  }
  int64_t object_id() const {
    return GetField<int64_t>(VT_OBJECT_ID, 0);
  }
  int32_t skill_id() const {
    return GetField<int32_t>(VT_SKILL_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OBJECT_TYPE) &&
           VerifyField<int64_t>(verifier, VT_OBJECT_ID) &&
           VerifyField<int32_t>(verifier, VT_SKILL_ID) &&
           verifier.EndTable();
  }
  SC_USE_SKILL_REST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_USE_SKILL_REST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_USE_SKILL_RES> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_USE_SKILL_REST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_USE_SKILL_RESBuilder {
  typedef SC_USE_SKILL_RES Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_type(Define::ObjectType object_type) {
    fbb_.AddElement<uint8_t>(SC_USE_SKILL_RES::VT_OBJECT_TYPE, static_cast<uint8_t>(object_type), 0);
  }
  void add_object_id(int64_t object_id) {
    fbb_.AddElement<int64_t>(SC_USE_SKILL_RES::VT_OBJECT_ID, object_id, 0);
  }
  void add_skill_id(int32_t skill_id) {
    fbb_.AddElement<int32_t>(SC_USE_SKILL_RES::VT_SKILL_ID, skill_id, 0);
  }
  explicit SC_USE_SKILL_RESBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_USE_SKILL_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_USE_SKILL_RES>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_USE_SKILL_RES> CreateSC_USE_SKILL_RES(
    flatbuffers::FlatBufferBuilder &_fbb,
    Define::ObjectType object_type = Define::ObjectType_NONE,
    int64_t object_id = 0,
    int32_t skill_id = 0) {
  SC_USE_SKILL_RESBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  builder_.add_skill_id(skill_id);
  builder_.add_object_type(object_type);
  return builder_.Finish();
}

flatbuffers::Offset<SC_USE_SKILL_RES> CreateSC_USE_SKILL_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_USE_SKILL_REST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DamageInfoT : public flatbuffers::NativeTable {
  typedef DamageInfo TableType;
  Define::ObjectType object_type = Define::ObjectType_NONE;
  int64_t oid = 0;
  int32_t damage = 0;
  bool is_critical = false;
};

struct DamageInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DamageInfoT NativeTableType;
  typedef DamageInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_TYPE = 4,
    VT_OID = 6,
    VT_DAMAGE = 8,
    VT_IS_CRITICAL = 10
  };
  Define::ObjectType object_type() const {
    return static_cast<Define::ObjectType>(GetField<uint8_t>(VT_OBJECT_TYPE, 0));
  }
  int64_t oid() const {
    return GetField<int64_t>(VT_OID, 0);
  }
  int32_t damage() const {
    return GetField<int32_t>(VT_DAMAGE, 0);
  }
  bool is_critical() const {
    return GetField<uint8_t>(VT_IS_CRITICAL, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_OBJECT_TYPE) &&
           VerifyField<int64_t>(verifier, VT_OID) &&
           VerifyField<int32_t>(verifier, VT_DAMAGE) &&
           VerifyField<uint8_t>(verifier, VT_IS_CRITICAL) &&
           verifier.EndTable();
  }
  DamageInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DamageInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<DamageInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const DamageInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DamageInfoBuilder {
  typedef DamageInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_type(Define::ObjectType object_type) {
    fbb_.AddElement<uint8_t>(DamageInfo::VT_OBJECT_TYPE, static_cast<uint8_t>(object_type), 0);
  }
  void add_oid(int64_t oid) {
    fbb_.AddElement<int64_t>(DamageInfo::VT_OID, oid, 0);
  }
  void add_damage(int32_t damage) {
    fbb_.AddElement<int32_t>(DamageInfo::VT_DAMAGE, damage, 0);
  }
  void add_is_critical(bool is_critical) {
    fbb_.AddElement<uint8_t>(DamageInfo::VT_IS_CRITICAL, static_cast<uint8_t>(is_critical), 0);
  }
  explicit DamageInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DamageInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DamageInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<DamageInfo> CreateDamageInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    Define::ObjectType object_type = Define::ObjectType_NONE,
    int64_t oid = 0,
    int32_t damage = 0,
    bool is_critical = false) {
  DamageInfoBuilder builder_(_fbb);
  builder_.add_oid(oid);
  builder_.add_damage(damage);
  builder_.add_is_critical(is_critical);
  builder_.add_object_type(object_type);
  return builder_.Finish();
}

flatbuffers::Offset<DamageInfo> CreateDamageInfo(flatbuffers::FlatBufferBuilder &_fbb, const DamageInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_GET_DAMAGE_NOTIT : public flatbuffers::NativeTable {
  typedef SC_GET_DAMAGE_NOTI TableType;
  std::vector<std::unique_ptr<GamePacket::DamageInfoT>> damage_info{};
};

struct SC_GET_DAMAGE_NOTI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_GET_DAMAGE_NOTIT NativeTableType;
  typedef SC_GET_DAMAGE_NOTIBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DAMAGE_INFO = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<GamePacket::DamageInfo>> *damage_info() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GamePacket::DamageInfo>> *>(VT_DAMAGE_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DAMAGE_INFO) &&
           verifier.VerifyVector(damage_info()) &&
           verifier.VerifyVectorOfTables(damage_info()) &&
           verifier.EndTable();
  }
  SC_GET_DAMAGE_NOTIT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_GET_DAMAGE_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_GET_DAMAGE_NOTI> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_GET_DAMAGE_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_GET_DAMAGE_NOTIBuilder {
  typedef SC_GET_DAMAGE_NOTI Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_damage_info(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GamePacket::DamageInfo>>> damage_info) {
    fbb_.AddOffset(SC_GET_DAMAGE_NOTI::VT_DAMAGE_INFO, damage_info);
  }
  explicit SC_GET_DAMAGE_NOTIBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_GET_DAMAGE_NOTI> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_GET_DAMAGE_NOTI>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_GET_DAMAGE_NOTI> CreateSC_GET_DAMAGE_NOTI(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GamePacket::DamageInfo>>> damage_info = 0) {
  SC_GET_DAMAGE_NOTIBuilder builder_(_fbb);
  builder_.add_damage_info(damage_info);
  return builder_.Finish();
}

inline flatbuffers::Offset<SC_GET_DAMAGE_NOTI> CreateSC_GET_DAMAGE_NOTIDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<GamePacket::DamageInfo>> *damage_info = nullptr) {
  auto damage_info__ = damage_info ? _fbb.CreateVector<flatbuffers::Offset<GamePacket::DamageInfo>>(*damage_info) : 0;
  return GamePacket::CreateSC_GET_DAMAGE_NOTI(
      _fbb,
      damage_info__);
}

flatbuffers::Offset<SC_GET_DAMAGE_NOTI> CreateSC_GET_DAMAGE_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const SC_GET_DAMAGE_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CS_REVIVE_REQT : public flatbuffers::NativeTable {
  typedef CS_REVIVE_REQ TableType;
};

struct CS_REVIVE_REQ FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CS_REVIVE_REQT NativeTableType;
  typedef CS_REVIVE_REQBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  CS_REVIVE_REQT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CS_REVIVE_REQT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CS_REVIVE_REQ> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_REVIVE_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CS_REVIVE_REQBuilder {
  typedef CS_REVIVE_REQ Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit CS_REVIVE_REQBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CS_REVIVE_REQ> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CS_REVIVE_REQ>(end);
    return o;
  }
};

inline flatbuffers::Offset<CS_REVIVE_REQ> CreateCS_REVIVE_REQ(
    flatbuffers::FlatBufferBuilder &_fbb) {
  CS_REVIVE_REQBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<CS_REVIVE_REQ> CreateCS_REVIVE_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_REVIVE_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_REVIVE_REST : public flatbuffers::NativeTable {
  typedef SC_REVIVE_RES TableType;
  std::unique_ptr<Info::ObjectInfoT> object_info{};
};

struct SC_REVIVE_RES FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_REVIVE_REST NativeTableType;
  typedef SC_REVIVE_RESBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_INFO = 4
  };
  const Info::ObjectInfo *object_info() const {
    return GetPointer<const Info::ObjectInfo *>(VT_OBJECT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_INFO) &&
           verifier.VerifyTable(object_info()) &&
           verifier.EndTable();
  }
  SC_REVIVE_REST *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_REVIVE_REST *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_REVIVE_RES> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_REVIVE_REST* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_REVIVE_RESBuilder {
  typedef SC_REVIVE_RES Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_info(flatbuffers::Offset<Info::ObjectInfo> object_info) {
    fbb_.AddOffset(SC_REVIVE_RES::VT_OBJECT_INFO, object_info);
  }
  explicit SC_REVIVE_RESBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_REVIVE_RES> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_REVIVE_RES>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_REVIVE_RES> CreateSC_REVIVE_RES(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Info::ObjectInfo> object_info = 0) {
  SC_REVIVE_RESBuilder builder_(_fbb);
  builder_.add_object_info(object_info);
  return builder_.Finish();
}

flatbuffers::Offset<SC_REVIVE_RES> CreateSC_REVIVE_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_REVIVE_REST *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SC_SPAWN_PROJECTILE_NOTIT : public flatbuffers::NativeTable {
  typedef SC_SPAWN_PROJECTILE_NOTI TableType;
  std::unique_ptr<Info::ObjectInfoT> object_info{};
  Define::ProjectileType projectile_type = Define::ProjectileType_NONE;
  float speed = 0.0f;
};

struct SC_SPAWN_PROJECTILE_NOTI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SC_SPAWN_PROJECTILE_NOTIT NativeTableType;
  typedef SC_SPAWN_PROJECTILE_NOTIBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_INFO = 4,
    VT_PROJECTILE_TYPE = 6,
    VT_SPEED = 8
  };
  const Info::ObjectInfo *object_info() const {
    return GetPointer<const Info::ObjectInfo *>(VT_OBJECT_INFO);
  }
  Define::ProjectileType projectile_type() const {
    return static_cast<Define::ProjectileType>(GetField<uint8_t>(VT_PROJECTILE_TYPE, 0));
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECT_INFO) &&
           verifier.VerifyTable(object_info()) &&
           VerifyField<uint8_t>(verifier, VT_PROJECTILE_TYPE) &&
           VerifyField<float>(verifier, VT_SPEED) &&
           verifier.EndTable();
  }
  SC_SPAWN_PROJECTILE_NOTIT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SC_SPAWN_PROJECTILE_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SC_SPAWN_PROJECTILE_NOTI> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_SPAWN_PROJECTILE_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SC_SPAWN_PROJECTILE_NOTIBuilder {
  typedef SC_SPAWN_PROJECTILE_NOTI Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_object_info(flatbuffers::Offset<Info::ObjectInfo> object_info) {
    fbb_.AddOffset(SC_SPAWN_PROJECTILE_NOTI::VT_OBJECT_INFO, object_info);
  }
  void add_projectile_type(Define::ProjectileType projectile_type) {
    fbb_.AddElement<uint8_t>(SC_SPAWN_PROJECTILE_NOTI::VT_PROJECTILE_TYPE, static_cast<uint8_t>(projectile_type), 0);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(SC_SPAWN_PROJECTILE_NOTI::VT_SPEED, speed, 0.0f);
  }
  explicit SC_SPAWN_PROJECTILE_NOTIBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SC_SPAWN_PROJECTILE_NOTI> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SC_SPAWN_PROJECTILE_NOTI>(end);
    return o;
  }
};

inline flatbuffers::Offset<SC_SPAWN_PROJECTILE_NOTI> CreateSC_SPAWN_PROJECTILE_NOTI(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Info::ObjectInfo> object_info = 0,
    Define::ProjectileType projectile_type = Define::ProjectileType_NONE,
    float speed = 0.0f) {
  SC_SPAWN_PROJECTILE_NOTIBuilder builder_(_fbb);
  builder_.add_speed(speed);
  builder_.add_object_info(object_info);
  builder_.add_projectile_type(projectile_type);
  return builder_.Finish();
}

flatbuffers::Offset<SC_SPAWN_PROJECTILE_NOTI> CreateSC_SPAWN_PROJECTILE_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const SC_SPAWN_PROJECTILE_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct RootT : public flatbuffers::NativeTable {
  typedef Root TableType;
  GamePacket::PacketUnion packet{};
};

struct Root FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RootT NativeTableType;
  typedef RootBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4,
    VT_PACKET = 6
  };
  GamePacket::Packet packet_type() const {
    return static_cast<GamePacket::Packet>(GetField<uint8_t>(VT_PACKET_TYPE, 0));
  }
  const void *packet() const {
    return GetPointer<const void *>(VT_PACKET);
  }
  template<typename T> const T *packet_as() const;
  const GamePacket::CS_LOGIN_REQ *packet_as_CS_LOGIN_REQ() const {
    return packet_type() == GamePacket::Packet_CS_LOGIN_REQ ? static_cast<const GamePacket::CS_LOGIN_REQ *>(packet()) : nullptr;
  }
  const GamePacket::SC_LOGIN_RES *packet_as_SC_LOGIN_RES() const {
    return packet_type() == GamePacket::Packet_SC_LOGIN_RES ? static_cast<const GamePacket::SC_LOGIN_RES *>(packet()) : nullptr;
  }
  const GamePacket::SC_PING_REQ *packet_as_SC_PING_REQ() const {
    return packet_type() == GamePacket::Packet_SC_PING_REQ ? static_cast<const GamePacket::SC_PING_REQ *>(packet()) : nullptr;
  }
  const GamePacket::CS_PING_RES *packet_as_CS_PING_RES() const {
    return packet_type() == GamePacket::Packet_CS_PING_RES ? static_cast<const GamePacket::CS_PING_RES *>(packet()) : nullptr;
  }
  const GamePacket::CS_LOGOUT_NOTI *packet_as_CS_LOGOUT_NOTI() const {
    return packet_type() == GamePacket::Packet_CS_LOGOUT_NOTI ? static_cast<const GamePacket::CS_LOGOUT_NOTI *>(packet()) : nullptr;
  }
  const GamePacket::SC_SPAWN_PLAYER_NOTI *packet_as_SC_SPAWN_PLAYER_NOTI() const {
    return packet_type() == GamePacket::Packet_SC_SPAWN_PLAYER_NOTI ? static_cast<const GamePacket::SC_SPAWN_PLAYER_NOTI *>(packet()) : nullptr;
  }
  const GamePacket::SC_DESPAWN_OBJECT_NOTI *packet_as_SC_DESPAWN_OBJECT_NOTI() const {
    return packet_type() == GamePacket::Packet_SC_DESPAWN_OBJECT_NOTI ? static_cast<const GamePacket::SC_DESPAWN_OBJECT_NOTI *>(packet()) : nullptr;
  }
  const GamePacket::CS_MOVE_REQ *packet_as_CS_MOVE_REQ() const {
    return packet_type() == GamePacket::Packet_CS_MOVE_REQ ? static_cast<const GamePacket::CS_MOVE_REQ *>(packet()) : nullptr;
  }
  const GamePacket::SC_MOVE_RES *packet_as_SC_MOVE_RES() const {
    return packet_type() == GamePacket::Packet_SC_MOVE_RES ? static_cast<const GamePacket::SC_MOVE_RES *>(packet()) : nullptr;
  }
  const GamePacket::CS_SET_STATE_REQ *packet_as_CS_SET_STATE_REQ() const {
    return packet_type() == GamePacket::Packet_CS_SET_STATE_REQ ? static_cast<const GamePacket::CS_SET_STATE_REQ *>(packet()) : nullptr;
  }
  const GamePacket::SC_SET_STATE_RES *packet_as_SC_SET_STATE_RES() const {
    return packet_type() == GamePacket::Packet_SC_SET_STATE_RES ? static_cast<const GamePacket::SC_SET_STATE_RES *>(packet()) : nullptr;
  }
  const GamePacket::CS_USE_SKILL_REQ *packet_as_CS_USE_SKILL_REQ() const {
    return packet_type() == GamePacket::Packet_CS_USE_SKILL_REQ ? static_cast<const GamePacket::CS_USE_SKILL_REQ *>(packet()) : nullptr;
  }
  const GamePacket::SC_USE_SKILL_RES *packet_as_SC_USE_SKILL_RES() const {
    return packet_type() == GamePacket::Packet_SC_USE_SKILL_RES ? static_cast<const GamePacket::SC_USE_SKILL_RES *>(packet()) : nullptr;
  }
  const GamePacket::SC_GET_DAMAGE_NOTI *packet_as_SC_GET_DAMAGE_NOTI() const {
    return packet_type() == GamePacket::Packet_SC_GET_DAMAGE_NOTI ? static_cast<const GamePacket::SC_GET_DAMAGE_NOTI *>(packet()) : nullptr;
  }
  const GamePacket::CS_REVIVE_REQ *packet_as_CS_REVIVE_REQ() const {
    return packet_type() == GamePacket::Packet_CS_REVIVE_REQ ? static_cast<const GamePacket::CS_REVIVE_REQ *>(packet()) : nullptr;
  }
  const GamePacket::SC_REVIVE_RES *packet_as_SC_REVIVE_RES() const {
    return packet_type() == GamePacket::Packet_SC_REVIVE_RES ? static_cast<const GamePacket::SC_REVIVE_RES *>(packet()) : nullptr;
  }
  const GamePacket::SC_SPAWN_PROJECTILE_NOTI *packet_as_SC_SPAWN_PROJECTILE_NOTI() const {
    return packet_type() == GamePacket::Packet_SC_SPAWN_PROJECTILE_NOTI ? static_cast<const GamePacket::SC_SPAWN_PROJECTILE_NOTI *>(packet()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_TYPE) &&
           VerifyOffset(verifier, VT_PACKET) &&
           VerifyPacket(verifier, packet(), packet_type()) &&
           verifier.EndTable();
  }
  RootT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RootT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Root> Pack(flatbuffers::FlatBufferBuilder &_fbb, const RootT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const GamePacket::CS_LOGIN_REQ *Root::packet_as<GamePacket::CS_LOGIN_REQ>() const {
  return packet_as_CS_LOGIN_REQ();
}

template<> inline const GamePacket::SC_LOGIN_RES *Root::packet_as<GamePacket::SC_LOGIN_RES>() const {
  return packet_as_SC_LOGIN_RES();
}

template<> inline const GamePacket::SC_PING_REQ *Root::packet_as<GamePacket::SC_PING_REQ>() const {
  return packet_as_SC_PING_REQ();
}

template<> inline const GamePacket::CS_PING_RES *Root::packet_as<GamePacket::CS_PING_RES>() const {
  return packet_as_CS_PING_RES();
}

template<> inline const GamePacket::CS_LOGOUT_NOTI *Root::packet_as<GamePacket::CS_LOGOUT_NOTI>() const {
  return packet_as_CS_LOGOUT_NOTI();
}

template<> inline const GamePacket::SC_SPAWN_PLAYER_NOTI *Root::packet_as<GamePacket::SC_SPAWN_PLAYER_NOTI>() const {
  return packet_as_SC_SPAWN_PLAYER_NOTI();
}

template<> inline const GamePacket::SC_DESPAWN_OBJECT_NOTI *Root::packet_as<GamePacket::SC_DESPAWN_OBJECT_NOTI>() const {
  return packet_as_SC_DESPAWN_OBJECT_NOTI();
}

template<> inline const GamePacket::CS_MOVE_REQ *Root::packet_as<GamePacket::CS_MOVE_REQ>() const {
  return packet_as_CS_MOVE_REQ();
}

template<> inline const GamePacket::SC_MOVE_RES *Root::packet_as<GamePacket::SC_MOVE_RES>() const {
  return packet_as_SC_MOVE_RES();
}

template<> inline const GamePacket::CS_SET_STATE_REQ *Root::packet_as<GamePacket::CS_SET_STATE_REQ>() const {
  return packet_as_CS_SET_STATE_REQ();
}

template<> inline const GamePacket::SC_SET_STATE_RES *Root::packet_as<GamePacket::SC_SET_STATE_RES>() const {
  return packet_as_SC_SET_STATE_RES();
}

template<> inline const GamePacket::CS_USE_SKILL_REQ *Root::packet_as<GamePacket::CS_USE_SKILL_REQ>() const {
  return packet_as_CS_USE_SKILL_REQ();
}

template<> inline const GamePacket::SC_USE_SKILL_RES *Root::packet_as<GamePacket::SC_USE_SKILL_RES>() const {
  return packet_as_SC_USE_SKILL_RES();
}

template<> inline const GamePacket::SC_GET_DAMAGE_NOTI *Root::packet_as<GamePacket::SC_GET_DAMAGE_NOTI>() const {
  return packet_as_SC_GET_DAMAGE_NOTI();
}

template<> inline const GamePacket::CS_REVIVE_REQ *Root::packet_as<GamePacket::CS_REVIVE_REQ>() const {
  return packet_as_CS_REVIVE_REQ();
}

template<> inline const GamePacket::SC_REVIVE_RES *Root::packet_as<GamePacket::SC_REVIVE_RES>() const {
  return packet_as_SC_REVIVE_RES();
}

template<> inline const GamePacket::SC_SPAWN_PROJECTILE_NOTI *Root::packet_as<GamePacket::SC_SPAWN_PROJECTILE_NOTI>() const {
  return packet_as_SC_SPAWN_PROJECTILE_NOTI();
}

struct RootBuilder {
  typedef Root Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_packet_type(GamePacket::Packet packet_type) {
    fbb_.AddElement<uint8_t>(Root::VT_PACKET_TYPE, static_cast<uint8_t>(packet_type), 0);
  }
  void add_packet(flatbuffers::Offset<void> packet) {
    fbb_.AddOffset(Root::VT_PACKET, packet);
  }
  explicit RootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Root> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Root>(end);
    return o;
  }
};

inline flatbuffers::Offset<Root> CreateRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    GamePacket::Packet packet_type = GamePacket::Packet_NONE,
    flatbuffers::Offset<void> packet = 0) {
  RootBuilder builder_(_fbb);
  builder_.add_packet(packet);
  builder_.add_packet_type(packet_type);
  return builder_.Finish();
}

flatbuffers::Offset<Root> CreateRoot(flatbuffers::FlatBufferBuilder &_fbb, const RootT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CS_LOGIN_REQT *CS_LOGIN_REQ::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CS_LOGIN_REQT>(new CS_LOGIN_REQT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CS_LOGIN_REQ::UnPackTo(CS_LOGIN_REQT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = uid(); _o->uid = _e; }
  { auto _e = character_uid(); _o->character_uid = _e; }
  { auto _e = token(); _o->token = _e; }
}

inline flatbuffers::Offset<CS_LOGIN_REQ> CS_LOGIN_REQ::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_LOGIN_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCS_LOGIN_REQ(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CS_LOGIN_REQ> CreateCS_LOGIN_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_LOGIN_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CS_LOGIN_REQT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _uid = _o->uid;
  auto _character_uid = _o->character_uid;
  auto _token = _o->token;
  return GamePacket::CreateCS_LOGIN_REQ(
      _fbb,
      _uid,
      _character_uid,
      _token);
}

inline CharacterInfoT *CharacterInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CharacterInfoT>(new CharacterInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CharacterInfo::UnPackTo(CharacterInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = job(); _o->job = _e; }
  { auto _e = gear(); if (_e) _o->gear = flatbuffers::UnPackCharacterGear(*_e); }
}

inline flatbuffers::Offset<CharacterInfo> CharacterInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CharacterInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCharacterInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CharacterInfo> CreateCharacterInfo(flatbuffers::FlatBufferBuilder &_fbb, const CharacterInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CharacterInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _job = _o->job;
  auto _gear = flatbuffers::PackCharacterGear(_o->gear);
  return GamePacket::CreateCharacterInfo(
      _fbb,
      _name,
      _job,
      &_gear);
}

inline MyCharacterInfoT *MyCharacterInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MyCharacterInfoT>(new MyCharacterInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MyCharacterInfo::UnPackTo(MyCharacterInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = job(); _o->job = _e; }
  { auto _e = gear(); if (_e) _o->gear = flatbuffers::UnPackCharacterGear(*_e); }
  { auto _e = bonus_stat(); _o->bonus_stat = _e; }
}

inline flatbuffers::Offset<MyCharacterInfo> MyCharacterInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MyCharacterInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMyCharacterInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MyCharacterInfo> CreateMyCharacterInfo(flatbuffers::FlatBufferBuilder &_fbb, const MyCharacterInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MyCharacterInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _job = _o->job;
  auto _gear = flatbuffers::PackCharacterGear(_o->gear);
  auto _bonus_stat = _o->bonus_stat;
  return GamePacket::CreateMyCharacterInfo(
      _fbb,
      _name,
      _job,
      &_gear,
      _bonus_stat);
}

inline SC_LOGIN_REST *SC_LOGIN_RES::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_LOGIN_REST>(new SC_LOGIN_REST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_LOGIN_RES::UnPackTo(SC_LOGIN_REST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = result(); _o->result = _e; }
  { auto _e = object_info(); if (_e) _o->object_info = std::unique_ptr<Info::ObjectInfoT>(_e->UnPack(_resolver)); }
  { auto _e = creature_info(); if (_e) _o->creature_info = std::unique_ptr<Info::CreatureInfoT>(_e->UnPack(_resolver)); }
  { auto _e = character_info(); if (_e) _o->character_info = std::unique_ptr<GamePacket::MyCharacterInfoT>(_e->UnPack(_resolver)); }
  { auto _e = money(); if (_e) _o->money = std::unique_ptr<Info::MoneyWrapperT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<SC_LOGIN_RES> SC_LOGIN_RES::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_LOGIN_REST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_LOGIN_RES(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_LOGIN_RES> CreateSC_LOGIN_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_LOGIN_REST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_LOGIN_REST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _result = _o->result;
  auto _object_info = _o->object_info ? CreateObjectInfo(_fbb, _o->object_info.get(), _rehasher) : 0;
  auto _creature_info = _o->creature_info ? CreateCreatureInfo(_fbb, _o->creature_info.get(), _rehasher) : 0;
  auto _character_info = _o->character_info ? CreateMyCharacterInfo(_fbb, _o->character_info.get(), _rehasher) : 0;
  auto _money = _o->money ? CreateMoneyWrapper(_fbb, _o->money.get(), _rehasher) : 0;
  return GamePacket::CreateSC_LOGIN_RES(
      _fbb,
      _result,
      _object_info,
      _creature_info,
      _character_info,
      _money);
}

inline SC_PING_REQT *SC_PING_REQ::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_PING_REQT>(new SC_PING_REQT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_PING_REQ::UnPackTo(SC_PING_REQT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<SC_PING_REQ> SC_PING_REQ::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_PING_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_PING_REQ(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_PING_REQ> CreateSC_PING_REQ(flatbuffers::FlatBufferBuilder &_fbb, const SC_PING_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_PING_REQT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return GamePacket::CreateSC_PING_REQ(
      _fbb);
}

inline CS_PING_REST *CS_PING_RES::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CS_PING_REST>(new CS_PING_REST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CS_PING_RES::UnPackTo(CS_PING_REST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<CS_PING_RES> CS_PING_RES::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_PING_REST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCS_PING_RES(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CS_PING_RES> CreateCS_PING_RES(flatbuffers::FlatBufferBuilder &_fbb, const CS_PING_REST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CS_PING_REST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return GamePacket::CreateCS_PING_RES(
      _fbb);
}

inline CS_LOGOUT_NOTIT *CS_LOGOUT_NOTI::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CS_LOGOUT_NOTIT>(new CS_LOGOUT_NOTIT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CS_LOGOUT_NOTI::UnPackTo(CS_LOGOUT_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<CS_LOGOUT_NOTI> CS_LOGOUT_NOTI::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_LOGOUT_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCS_LOGOUT_NOTI(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CS_LOGOUT_NOTI> CreateCS_LOGOUT_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const CS_LOGOUT_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CS_LOGOUT_NOTIT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return GamePacket::CreateCS_LOGOUT_NOTI(
      _fbb);
}

inline SC_SPAWN_PLAYER_NOTIT *SC_SPAWN_PLAYER_NOTI::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_SPAWN_PLAYER_NOTIT>(new SC_SPAWN_PLAYER_NOTIT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_SPAWN_PLAYER_NOTI::UnPackTo(SC_SPAWN_PLAYER_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_info(); if (_e) _o->object_info = std::unique_ptr<Info::ObjectInfoT>(_e->UnPack(_resolver)); }
  { auto _e = creature_info(); if (_e) _o->creature_info = std::unique_ptr<Info::CreatureInfoT>(_e->UnPack(_resolver)); }
  { auto _e = character_info(); if (_e) _o->character_info = std::unique_ptr<GamePacket::CharacterInfoT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<SC_SPAWN_PLAYER_NOTI> SC_SPAWN_PLAYER_NOTI::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_SPAWN_PLAYER_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_SPAWN_PLAYER_NOTI(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_SPAWN_PLAYER_NOTI> CreateSC_SPAWN_PLAYER_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const SC_SPAWN_PLAYER_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_SPAWN_PLAYER_NOTIT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _object_info = _o->object_info ? CreateObjectInfo(_fbb, _o->object_info.get(), _rehasher) : 0;
  auto _creature_info = _o->creature_info ? CreateCreatureInfo(_fbb, _o->creature_info.get(), _rehasher) : 0;
  auto _character_info = _o->character_info ? CreateCharacterInfo(_fbb, _o->character_info.get(), _rehasher) : 0;
  return GamePacket::CreateSC_SPAWN_PLAYER_NOTI(
      _fbb,
      _object_info,
      _creature_info,
      _character_info);
}

inline SC_DESPAWN_OBJECT_NOTIT *SC_DESPAWN_OBJECT_NOTI::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_DESPAWN_OBJECT_NOTIT>(new SC_DESPAWN_OBJECT_NOTIT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_DESPAWN_OBJECT_NOTI::UnPackTo(SC_DESPAWN_OBJECT_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_type(); _o->object_type = _e; }
  { auto _e = oid(); _o->oid = _e; }
}

inline flatbuffers::Offset<SC_DESPAWN_OBJECT_NOTI> SC_DESPAWN_OBJECT_NOTI::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_DESPAWN_OBJECT_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_DESPAWN_OBJECT_NOTI(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_DESPAWN_OBJECT_NOTI> CreateSC_DESPAWN_OBJECT_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const SC_DESPAWN_OBJECT_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_DESPAWN_OBJECT_NOTIT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _object_type = _o->object_type;
  auto _oid = _o->oid;
  return GamePacket::CreateSC_DESPAWN_OBJECT_NOTI(
      _fbb,
      _object_type,
      _oid);
}

inline CS_MOVE_REQT *CS_MOVE_REQ::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CS_MOVE_REQT>(new CS_MOVE_REQT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CS_MOVE_REQ::UnPackTo(CS_MOVE_REQT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = is_run(); _o->is_run = _e; }
  { auto _e = pos_info(); if (_e) _o->pos_info = flatbuffers::UnPackPositionInfo(*_e); }
}

inline flatbuffers::Offset<CS_MOVE_REQ> CS_MOVE_REQ::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_MOVE_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCS_MOVE_REQ(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CS_MOVE_REQ> CreateCS_MOVE_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_MOVE_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CS_MOVE_REQT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _is_run = _o->is_run;
  auto _pos_info = flatbuffers::PackPositionInfo(_o->pos_info);
  return GamePacket::CreateCS_MOVE_REQ(
      _fbb,
      _is_run,
      &_pos_info);
}

inline SC_MOVE_REST *SC_MOVE_RES::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_MOVE_REST>(new SC_MOVE_REST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_MOVE_RES::UnPackTo(SC_MOVE_REST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_info(); if (_e) _o->object_info = std::unique_ptr<Info::ObjectInfoT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<SC_MOVE_RES> SC_MOVE_RES::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_MOVE_REST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_MOVE_RES(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_MOVE_RES> CreateSC_MOVE_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_MOVE_REST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_MOVE_REST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _object_info = _o->object_info ? CreateObjectInfo(_fbb, _o->object_info.get(), _rehasher) : 0;
  return GamePacket::CreateSC_MOVE_RES(
      _fbb,
      _object_info);
}

inline CS_SET_STATE_REQT *CS_SET_STATE_REQ::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CS_SET_STATE_REQT>(new CS_SET_STATE_REQT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CS_SET_STATE_REQ::UnPackTo(CS_SET_STATE_REQT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = state(); _o->state = _e; }
}

inline flatbuffers::Offset<CS_SET_STATE_REQ> CS_SET_STATE_REQ::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_SET_STATE_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCS_SET_STATE_REQ(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CS_SET_STATE_REQ> CreateCS_SET_STATE_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_SET_STATE_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CS_SET_STATE_REQT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _state = _o->state;
  return GamePacket::CreateCS_SET_STATE_REQ(
      _fbb,
      _state);
}

inline SC_SET_STATE_REST *SC_SET_STATE_RES::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_SET_STATE_REST>(new SC_SET_STATE_REST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_SET_STATE_RES::UnPackTo(SC_SET_STATE_REST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_type(); _o->object_type = _e; }
  { auto _e = object_id(); _o->object_id = _e; }
  { auto _e = state(); _o->state = _e; }
}

inline flatbuffers::Offset<SC_SET_STATE_RES> SC_SET_STATE_RES::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_SET_STATE_REST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_SET_STATE_RES(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_SET_STATE_RES> CreateSC_SET_STATE_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_SET_STATE_REST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_SET_STATE_REST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _object_type = _o->object_type;
  auto _object_id = _o->object_id;
  auto _state = _o->state;
  return GamePacket::CreateSC_SET_STATE_RES(
      _fbb,
      _object_type,
      _object_id,
      _state);
}

inline CS_USE_SKILL_REQT *CS_USE_SKILL_REQ::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CS_USE_SKILL_REQT>(new CS_USE_SKILL_REQT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CS_USE_SKILL_REQ::UnPackTo(CS_USE_SKILL_REQT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = skill_id(); _o->skill_id = _e; }
}

inline flatbuffers::Offset<CS_USE_SKILL_REQ> CS_USE_SKILL_REQ::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_USE_SKILL_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCS_USE_SKILL_REQ(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CS_USE_SKILL_REQ> CreateCS_USE_SKILL_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_USE_SKILL_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CS_USE_SKILL_REQT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _skill_id = _o->skill_id;
  return GamePacket::CreateCS_USE_SKILL_REQ(
      _fbb,
      _skill_id);
}

inline SC_USE_SKILL_REST *SC_USE_SKILL_RES::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_USE_SKILL_REST>(new SC_USE_SKILL_REST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_USE_SKILL_RES::UnPackTo(SC_USE_SKILL_REST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_type(); _o->object_type = _e; }
  { auto _e = object_id(); _o->object_id = _e; }
  { auto _e = skill_id(); _o->skill_id = _e; }
}

inline flatbuffers::Offset<SC_USE_SKILL_RES> SC_USE_SKILL_RES::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_USE_SKILL_REST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_USE_SKILL_RES(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_USE_SKILL_RES> CreateSC_USE_SKILL_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_USE_SKILL_REST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_USE_SKILL_REST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _object_type = _o->object_type;
  auto _object_id = _o->object_id;
  auto _skill_id = _o->skill_id;
  return GamePacket::CreateSC_USE_SKILL_RES(
      _fbb,
      _object_type,
      _object_id,
      _skill_id);
}

inline DamageInfoT *DamageInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DamageInfoT>(new DamageInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DamageInfo::UnPackTo(DamageInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_type(); _o->object_type = _e; }
  { auto _e = oid(); _o->oid = _e; }
  { auto _e = damage(); _o->damage = _e; }
  { auto _e = is_critical(); _o->is_critical = _e; }
}

inline flatbuffers::Offset<DamageInfo> DamageInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const DamageInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDamageInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<DamageInfo> CreateDamageInfo(flatbuffers::FlatBufferBuilder &_fbb, const DamageInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const DamageInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _object_type = _o->object_type;
  auto _oid = _o->oid;
  auto _damage = _o->damage;
  auto _is_critical = _o->is_critical;
  return GamePacket::CreateDamageInfo(
      _fbb,
      _object_type,
      _oid,
      _damage,
      _is_critical);
}

inline SC_GET_DAMAGE_NOTIT *SC_GET_DAMAGE_NOTI::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_GET_DAMAGE_NOTIT>(new SC_GET_DAMAGE_NOTIT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_GET_DAMAGE_NOTI::UnPackTo(SC_GET_DAMAGE_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = damage_info(); if (_e) { _o->damage_info.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->damage_info[_i] = std::unique_ptr<GamePacket::DamageInfoT>(_e->Get(_i)->UnPack(_resolver)); } } }
}

inline flatbuffers::Offset<SC_GET_DAMAGE_NOTI> SC_GET_DAMAGE_NOTI::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_GET_DAMAGE_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_GET_DAMAGE_NOTI(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_GET_DAMAGE_NOTI> CreateSC_GET_DAMAGE_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const SC_GET_DAMAGE_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_GET_DAMAGE_NOTIT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _damage_info = _o->damage_info.size() ? _fbb.CreateVector<flatbuffers::Offset<GamePacket::DamageInfo>> (_o->damage_info.size(), [](size_t i, _VectorArgs *__va) { return CreateDamageInfo(*__va->__fbb, __va->__o->damage_info[i].get(), __va->__rehasher); }, &_va ) : 0;
  return GamePacket::CreateSC_GET_DAMAGE_NOTI(
      _fbb,
      _damage_info);
}

inline CS_REVIVE_REQT *CS_REVIVE_REQ::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CS_REVIVE_REQT>(new CS_REVIVE_REQT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CS_REVIVE_REQ::UnPackTo(CS_REVIVE_REQT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<CS_REVIVE_REQ> CS_REVIVE_REQ::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CS_REVIVE_REQT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCS_REVIVE_REQ(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CS_REVIVE_REQ> CreateCS_REVIVE_REQ(flatbuffers::FlatBufferBuilder &_fbb, const CS_REVIVE_REQT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CS_REVIVE_REQT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return GamePacket::CreateCS_REVIVE_REQ(
      _fbb);
}

inline SC_REVIVE_REST *SC_REVIVE_RES::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_REVIVE_REST>(new SC_REVIVE_REST());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_REVIVE_RES::UnPackTo(SC_REVIVE_REST *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_info(); if (_e) _o->object_info = std::unique_ptr<Info::ObjectInfoT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<SC_REVIVE_RES> SC_REVIVE_RES::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_REVIVE_REST* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_REVIVE_RES(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_REVIVE_RES> CreateSC_REVIVE_RES(flatbuffers::FlatBufferBuilder &_fbb, const SC_REVIVE_REST *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_REVIVE_REST* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _object_info = _o->object_info ? CreateObjectInfo(_fbb, _o->object_info.get(), _rehasher) : 0;
  return GamePacket::CreateSC_REVIVE_RES(
      _fbb,
      _object_info);
}

inline SC_SPAWN_PROJECTILE_NOTIT *SC_SPAWN_PROJECTILE_NOTI::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SC_SPAWN_PROJECTILE_NOTIT>(new SC_SPAWN_PROJECTILE_NOTIT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SC_SPAWN_PROJECTILE_NOTI::UnPackTo(SC_SPAWN_PROJECTILE_NOTIT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = object_info(); if (_e) _o->object_info = std::unique_ptr<Info::ObjectInfoT>(_e->UnPack(_resolver)); }
  { auto _e = projectile_type(); _o->projectile_type = _e; }
  { auto _e = speed(); _o->speed = _e; }
}

inline flatbuffers::Offset<SC_SPAWN_PROJECTILE_NOTI> SC_SPAWN_PROJECTILE_NOTI::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SC_SPAWN_PROJECTILE_NOTIT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSC_SPAWN_PROJECTILE_NOTI(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SC_SPAWN_PROJECTILE_NOTI> CreateSC_SPAWN_PROJECTILE_NOTI(flatbuffers::FlatBufferBuilder &_fbb, const SC_SPAWN_PROJECTILE_NOTIT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SC_SPAWN_PROJECTILE_NOTIT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _object_info = _o->object_info ? CreateObjectInfo(_fbb, _o->object_info.get(), _rehasher) : 0;
  auto _projectile_type = _o->projectile_type;
  auto _speed = _o->speed;
  return GamePacket::CreateSC_SPAWN_PROJECTILE_NOTI(
      _fbb,
      _object_info,
      _projectile_type,
      _speed);
}

inline RootT *Root::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RootT>(new RootT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Root::UnPackTo(RootT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = packet_type(); _o->packet.type = _e; }
  { auto _e = packet(); if (_e) _o->packet.value = GamePacket::PacketUnion::UnPack(_e, packet_type(), _resolver); }
}

inline flatbuffers::Offset<Root> Root::Pack(flatbuffers::FlatBufferBuilder &_fbb, const RootT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRoot(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Root> CreateRoot(flatbuffers::FlatBufferBuilder &_fbb, const RootT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const RootT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _packet_type = _o->packet.type;
  auto _packet = _o->packet.Pack(_fbb);
  return GamePacket::CreateRoot(
      _fbb,
      _packet_type,
      _packet);
}

inline bool VerifyPacket(flatbuffers::Verifier &verifier, const void *obj, Packet type) {
  switch (type) {
    case Packet_NONE: {
      return true;
    }
    case Packet_CS_LOGIN_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_LOGIN_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_LOGIN_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_LOGIN_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_PING_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::SC_PING_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_CS_PING_RES: {
      auto ptr = reinterpret_cast<const GamePacket::CS_PING_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_CS_LOGOUT_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::CS_LOGOUT_NOTI *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_SPAWN_PLAYER_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_SPAWN_PLAYER_NOTI *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_DESPAWN_OBJECT_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_DESPAWN_OBJECT_NOTI *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_CS_MOVE_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_MOVE_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_MOVE_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_MOVE_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_CS_SET_STATE_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_SET_STATE_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_SET_STATE_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_SET_STATE_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_CS_USE_SKILL_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_USE_SKILL_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_USE_SKILL_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_USE_SKILL_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_GET_DAMAGE_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_GET_DAMAGE_NOTI *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_CS_REVIVE_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_REVIVE_REQ *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_REVIVE_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_REVIVE_RES *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Packet_SC_SPAWN_PROJECTILE_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_SPAWN_PROJECTILE_NOTI *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacket(
        verifier,  values->Get(i), types->GetEnum<Packet>(i))) {
      return false;
    }
  }
  return true;
}

inline void *PacketUnion::UnPack(const void *obj, Packet type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case Packet_CS_LOGIN_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_LOGIN_REQ *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_LOGIN_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_LOGIN_RES *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_PING_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::SC_PING_REQ *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_CS_PING_RES: {
      auto ptr = reinterpret_cast<const GamePacket::CS_PING_RES *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_CS_LOGOUT_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::CS_LOGOUT_NOTI *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_SPAWN_PLAYER_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_SPAWN_PLAYER_NOTI *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_DESPAWN_OBJECT_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_DESPAWN_OBJECT_NOTI *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_CS_MOVE_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_MOVE_REQ *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_MOVE_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_MOVE_RES *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_CS_SET_STATE_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_SET_STATE_REQ *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_SET_STATE_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_SET_STATE_RES *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_CS_USE_SKILL_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_USE_SKILL_REQ *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_USE_SKILL_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_USE_SKILL_RES *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_GET_DAMAGE_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_GET_DAMAGE_NOTI *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_CS_REVIVE_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_REVIVE_REQ *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_REVIVE_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_REVIVE_RES *>(obj);
      return ptr->UnPack(resolver);
    }
    case Packet_SC_SPAWN_PROJECTILE_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_SPAWN_PROJECTILE_NOTI *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> PacketUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case Packet_CS_LOGIN_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_LOGIN_REQT *>(value);
      return CreateCS_LOGIN_REQ(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_LOGIN_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_LOGIN_REST *>(value);
      return CreateSC_LOGIN_RES(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_PING_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::SC_PING_REQT *>(value);
      return CreateSC_PING_REQ(_fbb, ptr, _rehasher).Union();
    }
    case Packet_CS_PING_RES: {
      auto ptr = reinterpret_cast<const GamePacket::CS_PING_REST *>(value);
      return CreateCS_PING_RES(_fbb, ptr, _rehasher).Union();
    }
    case Packet_CS_LOGOUT_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::CS_LOGOUT_NOTIT *>(value);
      return CreateCS_LOGOUT_NOTI(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_SPAWN_PLAYER_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_SPAWN_PLAYER_NOTIT *>(value);
      return CreateSC_SPAWN_PLAYER_NOTI(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_DESPAWN_OBJECT_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_DESPAWN_OBJECT_NOTIT *>(value);
      return CreateSC_DESPAWN_OBJECT_NOTI(_fbb, ptr, _rehasher).Union();
    }
    case Packet_CS_MOVE_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_MOVE_REQT *>(value);
      return CreateCS_MOVE_REQ(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_MOVE_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_MOVE_REST *>(value);
      return CreateSC_MOVE_RES(_fbb, ptr, _rehasher).Union();
    }
    case Packet_CS_SET_STATE_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_SET_STATE_REQT *>(value);
      return CreateCS_SET_STATE_REQ(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_SET_STATE_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_SET_STATE_REST *>(value);
      return CreateSC_SET_STATE_RES(_fbb, ptr, _rehasher).Union();
    }
    case Packet_CS_USE_SKILL_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_USE_SKILL_REQT *>(value);
      return CreateCS_USE_SKILL_REQ(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_USE_SKILL_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_USE_SKILL_REST *>(value);
      return CreateSC_USE_SKILL_RES(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_GET_DAMAGE_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_GET_DAMAGE_NOTIT *>(value);
      return CreateSC_GET_DAMAGE_NOTI(_fbb, ptr, _rehasher).Union();
    }
    case Packet_CS_REVIVE_REQ: {
      auto ptr = reinterpret_cast<const GamePacket::CS_REVIVE_REQT *>(value);
      return CreateCS_REVIVE_REQ(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_REVIVE_RES: {
      auto ptr = reinterpret_cast<const GamePacket::SC_REVIVE_REST *>(value);
      return CreateSC_REVIVE_RES(_fbb, ptr, _rehasher).Union();
    }
    case Packet_SC_SPAWN_PROJECTILE_NOTI: {
      auto ptr = reinterpret_cast<const GamePacket::SC_SPAWN_PROJECTILE_NOTIT *>(value);
      return CreateSC_SPAWN_PROJECTILE_NOTI(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline PacketUnion::PacketUnion(const PacketUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case Packet_CS_LOGIN_REQ: {
      value = new GamePacket::CS_LOGIN_REQT(*reinterpret_cast<GamePacket::CS_LOGIN_REQT *>(u.value));
      break;
    }
    case Packet_SC_LOGIN_RES: {
      FLATBUFFERS_ASSERT(false);  // GamePacket::SC_LOGIN_REST not copyable.
      break;
    }
    case Packet_SC_PING_REQ: {
      value = new GamePacket::SC_PING_REQT(*reinterpret_cast<GamePacket::SC_PING_REQT *>(u.value));
      break;
    }
    case Packet_CS_PING_RES: {
      value = new GamePacket::CS_PING_REST(*reinterpret_cast<GamePacket::CS_PING_REST *>(u.value));
      break;
    }
    case Packet_CS_LOGOUT_NOTI: {
      value = new GamePacket::CS_LOGOUT_NOTIT(*reinterpret_cast<GamePacket::CS_LOGOUT_NOTIT *>(u.value));
      break;
    }
    case Packet_SC_SPAWN_PLAYER_NOTI: {
      FLATBUFFERS_ASSERT(false);  // GamePacket::SC_SPAWN_PLAYER_NOTIT not copyable.
      break;
    }
    case Packet_SC_DESPAWN_OBJECT_NOTI: {
      value = new GamePacket::SC_DESPAWN_OBJECT_NOTIT(*reinterpret_cast<GamePacket::SC_DESPAWN_OBJECT_NOTIT *>(u.value));
      break;
    }
    case Packet_CS_MOVE_REQ: {
      value = new GamePacket::CS_MOVE_REQT(*reinterpret_cast<GamePacket::CS_MOVE_REQT *>(u.value));
      break;
    }
    case Packet_SC_MOVE_RES: {
      FLATBUFFERS_ASSERT(false);  // GamePacket::SC_MOVE_REST not copyable.
      break;
    }
    case Packet_CS_SET_STATE_REQ: {
      value = new GamePacket::CS_SET_STATE_REQT(*reinterpret_cast<GamePacket::CS_SET_STATE_REQT *>(u.value));
      break;
    }
    case Packet_SC_SET_STATE_RES: {
      value = new GamePacket::SC_SET_STATE_REST(*reinterpret_cast<GamePacket::SC_SET_STATE_REST *>(u.value));
      break;
    }
    case Packet_CS_USE_SKILL_REQ: {
      value = new GamePacket::CS_USE_SKILL_REQT(*reinterpret_cast<GamePacket::CS_USE_SKILL_REQT *>(u.value));
      break;
    }
    case Packet_SC_USE_SKILL_RES: {
      value = new GamePacket::SC_USE_SKILL_REST(*reinterpret_cast<GamePacket::SC_USE_SKILL_REST *>(u.value));
      break;
    }
    case Packet_SC_GET_DAMAGE_NOTI: {
      FLATBUFFERS_ASSERT(false);  // GamePacket::SC_GET_DAMAGE_NOTIT not copyable.
      break;
    }
    case Packet_CS_REVIVE_REQ: {
      value = new GamePacket::CS_REVIVE_REQT(*reinterpret_cast<GamePacket::CS_REVIVE_REQT *>(u.value));
      break;
    }
    case Packet_SC_REVIVE_RES: {
      FLATBUFFERS_ASSERT(false);  // GamePacket::SC_REVIVE_REST not copyable.
      break;
    }
    case Packet_SC_SPAWN_PROJECTILE_NOTI: {
      FLATBUFFERS_ASSERT(false);  // GamePacket::SC_SPAWN_PROJECTILE_NOTIT not copyable.
      break;
    }
    default:
      break;
  }
}

inline void PacketUnion::Reset() {
  switch (type) {
    case Packet_CS_LOGIN_REQ: {
      auto ptr = reinterpret_cast<GamePacket::CS_LOGIN_REQT *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_LOGIN_RES: {
      auto ptr = reinterpret_cast<GamePacket::SC_LOGIN_REST *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_PING_REQ: {
      auto ptr = reinterpret_cast<GamePacket::SC_PING_REQT *>(value);
      delete ptr;
      break;
    }
    case Packet_CS_PING_RES: {
      auto ptr = reinterpret_cast<GamePacket::CS_PING_REST *>(value);
      delete ptr;
      break;
    }
    case Packet_CS_LOGOUT_NOTI: {
      auto ptr = reinterpret_cast<GamePacket::CS_LOGOUT_NOTIT *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_SPAWN_PLAYER_NOTI: {
      auto ptr = reinterpret_cast<GamePacket::SC_SPAWN_PLAYER_NOTIT *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_DESPAWN_OBJECT_NOTI: {
      auto ptr = reinterpret_cast<GamePacket::SC_DESPAWN_OBJECT_NOTIT *>(value);
      delete ptr;
      break;
    }
    case Packet_CS_MOVE_REQ: {
      auto ptr = reinterpret_cast<GamePacket::CS_MOVE_REQT *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_MOVE_RES: {
      auto ptr = reinterpret_cast<GamePacket::SC_MOVE_REST *>(value);
      delete ptr;
      break;
    }
    case Packet_CS_SET_STATE_REQ: {
      auto ptr = reinterpret_cast<GamePacket::CS_SET_STATE_REQT *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_SET_STATE_RES: {
      auto ptr = reinterpret_cast<GamePacket::SC_SET_STATE_REST *>(value);
      delete ptr;
      break;
    }
    case Packet_CS_USE_SKILL_REQ: {
      auto ptr = reinterpret_cast<GamePacket::CS_USE_SKILL_REQT *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_USE_SKILL_RES: {
      auto ptr = reinterpret_cast<GamePacket::SC_USE_SKILL_REST *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_GET_DAMAGE_NOTI: {
      auto ptr = reinterpret_cast<GamePacket::SC_GET_DAMAGE_NOTIT *>(value);
      delete ptr;
      break;
    }
    case Packet_CS_REVIVE_REQ: {
      auto ptr = reinterpret_cast<GamePacket::CS_REVIVE_REQT *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_REVIVE_RES: {
      auto ptr = reinterpret_cast<GamePacket::SC_REVIVE_REST *>(value);
      delete ptr;
      break;
    }
    case Packet_SC_SPAWN_PROJECTILE_NOTI: {
      auto ptr = reinterpret_cast<GamePacket::SC_SPAWN_PROJECTILE_NOTIT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = Packet_NONE;
}

inline bool VerifyCharacterInfoBase(flatbuffers::Verifier &verifier, const void *obj, CharacterInfoBase type) {
  switch (type) {
    case CharacterInfoBase_NONE: {
      return true;
    }
    case CharacterInfoBase_CharacterInfo: {
      auto ptr = reinterpret_cast<const GamePacket::CharacterInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case CharacterInfoBase_MyCharacterInfo: {
      auto ptr = reinterpret_cast<const GamePacket::MyCharacterInfo *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyCharacterInfoBaseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyCharacterInfoBase(
        verifier,  values->Get(i), types->GetEnum<CharacterInfoBase>(i))) {
      return false;
    }
  }
  return true;
}

inline void *CharacterInfoBaseUnion::UnPack(const void *obj, CharacterInfoBase type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case CharacterInfoBase_CharacterInfo: {
      auto ptr = reinterpret_cast<const GamePacket::CharacterInfo *>(obj);
      return ptr->UnPack(resolver);
    }
    case CharacterInfoBase_MyCharacterInfo: {
      auto ptr = reinterpret_cast<const GamePacket::MyCharacterInfo *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> CharacterInfoBaseUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case CharacterInfoBase_CharacterInfo: {
      auto ptr = reinterpret_cast<const GamePacket::CharacterInfoT *>(value);
      return CreateCharacterInfo(_fbb, ptr, _rehasher).Union();
    }
    case CharacterInfoBase_MyCharacterInfo: {
      auto ptr = reinterpret_cast<const GamePacket::MyCharacterInfoT *>(value);
      return CreateMyCharacterInfo(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline CharacterInfoBaseUnion::CharacterInfoBaseUnion(const CharacterInfoBaseUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case CharacterInfoBase_CharacterInfo: {
      value = new GamePacket::CharacterInfoT(*reinterpret_cast<GamePacket::CharacterInfoT *>(u.value));
      break;
    }
    case CharacterInfoBase_MyCharacterInfo: {
      value = new GamePacket::MyCharacterInfoT(*reinterpret_cast<GamePacket::MyCharacterInfoT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void CharacterInfoBaseUnion::Reset() {
  switch (type) {
    case CharacterInfoBase_CharacterInfo: {
      auto ptr = reinterpret_cast<GamePacket::CharacterInfoT *>(value);
      delete ptr;
      break;
    }
    case CharacterInfoBase_MyCharacterInfo: {
      auto ptr = reinterpret_cast<GamePacket::MyCharacterInfoT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = CharacterInfoBase_NONE;
}

inline const GamePacket::Root *GetRoot(const void *buf) {
  return flatbuffers::GetRoot<GamePacket::Root>(buf);
}

inline const GamePacket::Root *GetSizePrefixedRoot(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GamePacket::Root>(buf);
}

inline bool VerifyRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GamePacket::Root>(nullptr);
}

inline bool VerifySizePrefixedRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GamePacket::Root>(nullptr);
}

inline void FinishRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GamePacket::Root> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GamePacket::Root> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<GamePacket::RootT> UnPackRoot(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<GamePacket::RootT>(GetRoot(buf)->UnPack(res));
}

inline std::unique_ptr<GamePacket::RootT> UnPackSizePrefixedRoot(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<GamePacket::RootT>(GetSizePrefixedRoot(buf)->UnPack(res));
}

}  // namespace GamePacket

#endif  // FLATBUFFERS_GENERATED_GAMEPROTOCOL_GAMEPACKET_H_
