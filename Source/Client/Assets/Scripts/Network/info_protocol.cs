// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Info
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Vec2Int : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec2Int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Y { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<Info.Vec2Int> CreateVec2Int(FlatBufferBuilder builder, int X, int Y) {
    builder.Prep(4, 8);
    builder.PutInt(Y);
    builder.PutInt(X);
    return new Offset<Info.Vec2Int>(builder.Offset);
  }
  public Vec2IntT UnPack() {
    var _o = new Vec2IntT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vec2IntT _o) {
    _o.X = this.X;
    _o.Y = this.Y;
  }
  public static Offset<Info.Vec2Int> Pack(FlatBufferBuilder builder, Vec2IntT _o) {
    if (_o == null) return default(Offset<Info.Vec2Int>);
    return CreateVec2Int(
      builder,
      _o.X,
      _o.Y);
  }
};

public class Vec2IntT
{
  public int X { get; set; }
  public int Y { get; set; }

  public Vec2IntT() {
    this.X = 0;
    this.Y = 0;
  }
}

public struct PositionInfo : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public PositionInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Info.Vec2Int Pos { get { return (new Info.Vec2Int()).__assign(__p.bb_pos + 0, __p.bb); } }
  public Define.CreatureState State { get { return (Define.CreatureState)__p.bb.Get(__p.bb_pos + 8); } }
  public Define.Dir MoveDir { get { return (Define.Dir)__p.bb.Get(__p.bb_pos + 9); } }

  public static Offset<Info.PositionInfo> CreatePositionInfo(FlatBufferBuilder builder, int pos_X, int pos_Y, Define.CreatureState State, Define.Dir MoveDir) {
    builder.Prep(4, 12);
    builder.Pad(2);
    builder.PutByte((byte)MoveDir);
    builder.PutByte((byte)State);
    builder.Prep(4, 8);
    builder.PutInt(pos_Y);
    builder.PutInt(pos_X);
    return new Offset<Info.PositionInfo>(builder.Offset);
  }
  public PositionInfoT UnPack() {
    var _o = new PositionInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PositionInfoT _o) {
    _o.Pos = this.Pos.UnPack();
    _o.State = this.State;
    _o.MoveDir = this.MoveDir;
  }
  public static Offset<Info.PositionInfo> Pack(FlatBufferBuilder builder, PositionInfoT _o) {
    if (_o == null) return default(Offset<Info.PositionInfo>);
    var _pos_x = _o.Pos.X;
    var _pos_y = _o.Pos.Y;
    return CreatePositionInfo(
      builder,
      _pos_x,
      _pos_y,
      _o.State,
      _o.MoveDir);
  }
};

public class PositionInfoT
{
  public Info.Vec2IntT Pos { get; set; }
  public Define.CreatureState State { get; set; }
  public Define.Dir MoveDir { get; set; }

  public PositionInfoT() {
    this.Pos = new Info.Vec2IntT();
    this.State = Define.CreatureState.IDLE;
    this.MoveDir = Define.Dir.UP;
  }
}

public struct Stat : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Stat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value(int j) { return __p.bb.GetInt(__p.bb_pos + 0 + j * 4); }

  public static Offset<Info.Stat> CreateStat(FlatBufferBuilder builder, int[] Value) {
    builder.Prep(4, 12);
    for (int _idx0 = 3; _idx0 > 0; _idx0--) {
      builder.PutInt(Value[_idx0-1]);
    }
    return new Offset<Info.Stat>(builder.Offset);
  }
  public StatT UnPack() {
    var _o = new StatT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StatT _o) {
    _o.Value = new int[3];
    for (var _j = 0; _j < 3; ++_j) { _o.Value[_j] = this.Value(_j); }
  }
  public static Offset<Info.Stat> Pack(FlatBufferBuilder builder, StatT _o) {
    if (_o == null) return default(Offset<Info.Stat>);
    var _value = _o.Value;
    return CreateStat(
      builder,
      _value);
  }
};

public class StatT
{
  public int[] Value { get; set; }

  public StatT() {
    this.Value = new int[3];
  }
}

public struct StatWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static StatWrapper GetRootAsStatWrapper(ByteBuffer _bb) { return GetRootAsStatWrapper(_bb, new StatWrapper()); }
  public static StatWrapper GetRootAsStatWrapper(ByteBuffer _bb, StatWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StatWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Info.Stat? Value { get { int o = __p.__offset(4); return o != 0 ? (Info.Stat?)(new Info.Stat()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartStatWrapper(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, Offset<Info.Stat> valueOffset) { builder.AddStruct(0, valueOffset.Value, 0); }
  public static Offset<Info.StatWrapper> EndStatWrapper(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Info.StatWrapper>(o);
  }
  public StatWrapperT UnPack() {
    var _o = new StatWrapperT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StatWrapperT _o) {
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<Info.StatWrapper> Pack(FlatBufferBuilder builder, StatWrapperT _o) {
    if (_o == null) return default(Offset<Info.StatWrapper>);
    StartStatWrapper(builder);
    AddValue(builder, Info.Stat.Pack(builder, _o.Value));
    return EndStatWrapper(builder);
  }
};

public class StatWrapperT
{
  public Info.StatT Value { get; set; }

  public StatWrapperT() {
    this.Value = new Info.StatT();
  }
}

public struct Ability : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Ability __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value(int j) { return __p.bb.GetInt(__p.bb_pos + 0 + j * 4); }

  public static Offset<Info.Ability> CreateAbility(FlatBufferBuilder builder, int[] Value) {
    builder.Prep(4, 48);
    for (int _idx0 = 12; _idx0 > 0; _idx0--) {
      builder.PutInt(Value[_idx0-1]);
    }
    return new Offset<Info.Ability>(builder.Offset);
  }
  public AbilityT UnPack() {
    var _o = new AbilityT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AbilityT _o) {
    _o.Value = new int[12];
    for (var _j = 0; _j < 12; ++_j) { _o.Value[_j] = this.Value(_j); }
  }
  public static Offset<Info.Ability> Pack(FlatBufferBuilder builder, AbilityT _o) {
    if (_o == null) return default(Offset<Info.Ability>);
    var _value = _o.Value;
    return CreateAbility(
      builder,
      _value);
  }
};

public class AbilityT
{
  public int[] Value { get; set; }

  public AbilityT() {
    this.Value = new int[12];
  }
}

public struct Speed : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Speed __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value(int j) { return __p.bb.GetFloat(__p.bb_pos + 0 + j * 4); }

  public static Offset<Info.Speed> CreateSpeed(FlatBufferBuilder builder, float[] Value) {
    builder.Prep(4, 12);
    for (int _idx0 = 3; _idx0 > 0; _idx0--) {
      builder.PutFloat(Value[_idx0-1]);
    }
    return new Offset<Info.Speed>(builder.Offset);
  }
  public SpeedT UnPack() {
    var _o = new SpeedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpeedT _o) {
    _o.Value = new float[3];
    for (var _j = 0; _j < 3; ++_j) { _o.Value[_j] = this.Value(_j); }
  }
  public static Offset<Info.Speed> Pack(FlatBufferBuilder builder, SpeedT _o) {
    if (_o == null) return default(Offset<Info.Speed>);
    var _value = _o.Value;
    return CreateSpeed(
      builder,
      _value);
  }
};

public class SpeedT
{
  public float[] Value { get; set; }

  public SpeedT() {
    this.Value = new float[3];
  }
}

public struct CharacterGear : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public CharacterGear __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Index(int j) { return __p.bb.Get(__p.bb_pos + 0 + j * 1); }

  public static Offset<Info.CharacterGear> CreateCharacterGear(FlatBufferBuilder builder, byte[] Index) {
    builder.Prep(1, 9);
    for (int _idx0 = 9; _idx0 > 0; _idx0--) {
      builder.PutByte(Index[_idx0-1]);
    }
    return new Offset<Info.CharacterGear>(builder.Offset);
  }
  public CharacterGearT UnPack() {
    var _o = new CharacterGearT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterGearT _o) {
    _o.Index = new byte[9];
    for (var _j = 0; _j < 9; ++_j) { _o.Index[_j] = this.Index(_j); }
  }
  public static Offset<Info.CharacterGear> Pack(FlatBufferBuilder builder, CharacterGearT _o) {
    if (_o == null) return default(Offset<Info.CharacterGear>);
    var _index = _o.Index;
    return CreateCharacterGear(
      builder,
      _index);
  }
};

public class CharacterGearT
{
  public byte[] Index { get; set; }

  public CharacterGearT() {
    this.Index = new byte[9];
  }
}

public struct Money : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Money __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value(int j) { return __p.bb.GetInt(__p.bb_pos + 0 + j * 4); }

  public static Offset<Info.Money> CreateMoney(FlatBufferBuilder builder, int[] Value) {
    builder.Prep(4, 8);
    for (int _idx0 = 2; _idx0 > 0; _idx0--) {
      builder.PutInt(Value[_idx0-1]);
    }
    return new Offset<Info.Money>(builder.Offset);
  }
  public MoneyT UnPack() {
    var _o = new MoneyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MoneyT _o) {
    _o.Value = new int[2];
    for (var _j = 0; _j < 2; ++_j) { _o.Value[_j] = this.Value(_j); }
  }
  public static Offset<Info.Money> Pack(FlatBufferBuilder builder, MoneyT _o) {
    if (_o == null) return default(Offset<Info.Money>);
    var _value = _o.Value;
    return CreateMoney(
      builder,
      _value);
  }
};

public class MoneyT
{
  public int[] Value { get; set; }

  public MoneyT() {
    this.Value = new int[2];
  }
}

public struct MoneyWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MoneyWrapper GetRootAsMoneyWrapper(ByteBuffer _bb) { return GetRootAsMoneyWrapper(_bb, new MoneyWrapper()); }
  public static MoneyWrapper GetRootAsMoneyWrapper(ByteBuffer _bb, MoneyWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoneyWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Info.Money? Value { get { int o = __p.__offset(4); return o != 0 ? (Info.Money?)(new Info.Money()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartMoneyWrapper(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, Offset<Info.Money> valueOffset) { builder.AddStruct(0, valueOffset.Value, 0); }
  public static Offset<Info.MoneyWrapper> EndMoneyWrapper(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Info.MoneyWrapper>(o);
  }
  public MoneyWrapperT UnPack() {
    var _o = new MoneyWrapperT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MoneyWrapperT _o) {
    _o.Value = this.Value.HasValue ? this.Value.Value.UnPack() : null;
  }
  public static Offset<Info.MoneyWrapper> Pack(FlatBufferBuilder builder, MoneyWrapperT _o) {
    if (_o == null) return default(Offset<Info.MoneyWrapper>);
    StartMoneyWrapper(builder);
    AddValue(builder, Info.Money.Pack(builder, _o.Value));
    return EndMoneyWrapper(builder);
  }
};

public class MoneyWrapperT
{
  public Info.MoneyT Value { get; set; }

  public MoneyWrapperT() {
    this.Value = new Info.MoneyT();
  }
}

public struct CreatureInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CreatureInfo GetRootAsCreatureInfo(ByteBuffer _bb) { return GetRootAsCreatureInfo(_bb, new CreatureInfo()); }
  public static CreatureInfo GetRootAsCreatureInfo(ByteBuffer _bb, CreatureInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CreatureInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Define.ObjectType ObjType { get { int o = __p.__offset(4); return o != 0 ? (Define.ObjectType)__p.bb.Get(o + __p.bb_pos) : Define.ObjectType.PLAYER; } }
  public long Uid { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public byte Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public long Exp { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Info.Stat? Stat { get { int o = __p.__offset(12); return o != 0 ? (Info.Stat?)(new Info.Stat()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int Hp { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Mp { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Info.Ability? Ability { get { int o = __p.__offset(18); return o != 0 ? (Info.Ability?)(new Info.Ability()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Info.Speed? Speed { get { int o = __p.__offset(20); return o != 0 ? (Info.Speed?)(new Info.Speed()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Info.PositionInfo? PosInfo { get { int o = __p.__offset(22); return o != 0 ? (Info.PositionInfo?)(new Info.PositionInfo()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static Offset<Info.CreatureInfo> CreateCreatureInfo(FlatBufferBuilder builder,
      Define.ObjectType obj_type = Define.ObjectType.PLAYER,
      long uid = 0,
      byte level = 0,
      long exp = 0,
      Info.StatT stat = null,
      int hp = 0,
      int mp = 0,
      Info.AbilityT ability = null,
      Info.SpeedT speed = null,
      Info.PositionInfoT pos_info = null) {
    builder.StartTable(10);
    CreatureInfo.AddExp(builder, exp);
    CreatureInfo.AddUid(builder, uid);
    CreatureInfo.AddPosInfo(builder, Info.PositionInfo.Pack(builder, pos_info));
    CreatureInfo.AddSpeed(builder, Info.Speed.Pack(builder, speed));
    CreatureInfo.AddAbility(builder, Info.Ability.Pack(builder, ability));
    CreatureInfo.AddMp(builder, mp);
    CreatureInfo.AddHp(builder, hp);
    CreatureInfo.AddStat(builder, Info.Stat.Pack(builder, stat));
    CreatureInfo.AddLevel(builder, level);
    CreatureInfo.AddObjType(builder, obj_type);
    return CreatureInfo.EndCreatureInfo(builder);
  }

  public static void StartCreatureInfo(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddObjType(FlatBufferBuilder builder, Define.ObjectType objType) { builder.AddByte(0, (byte)objType, 0); }
  public static void AddUid(FlatBufferBuilder builder, long uid) { builder.AddLong(1, uid, 0); }
  public static void AddLevel(FlatBufferBuilder builder, byte level) { builder.AddByte(2, level, 0); }
  public static void AddExp(FlatBufferBuilder builder, long exp) { builder.AddLong(3, exp, 0); }
  public static void AddStat(FlatBufferBuilder builder, Offset<Info.Stat> statOffset) { builder.AddStruct(4, statOffset.Value, 0); }
  public static void AddHp(FlatBufferBuilder builder, int hp) { builder.AddInt(5, hp, 0); }
  public static void AddMp(FlatBufferBuilder builder, int mp) { builder.AddInt(6, mp, 0); }
  public static void AddAbility(FlatBufferBuilder builder, Offset<Info.Ability> abilityOffset) { builder.AddStruct(7, abilityOffset.Value, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, Offset<Info.Speed> speedOffset) { builder.AddStruct(8, speedOffset.Value, 0); }
  public static void AddPosInfo(FlatBufferBuilder builder, Offset<Info.PositionInfo> posInfoOffset) { builder.AddStruct(9, posInfoOffset.Value, 0); }
  public static Offset<Info.CreatureInfo> EndCreatureInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Info.CreatureInfo>(o);
  }
  public CreatureInfoT UnPack() {
    var _o = new CreatureInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CreatureInfoT _o) {
    _o.ObjType = this.ObjType;
    _o.Uid = this.Uid;
    _o.Level = this.Level;
    _o.Exp = this.Exp;
    _o.Stat = this.Stat.HasValue ? this.Stat.Value.UnPack() : null;
    _o.Hp = this.Hp;
    _o.Mp = this.Mp;
    _o.Ability = this.Ability.HasValue ? this.Ability.Value.UnPack() : null;
    _o.Speed = this.Speed.HasValue ? this.Speed.Value.UnPack() : null;
    _o.PosInfo = this.PosInfo.HasValue ? this.PosInfo.Value.UnPack() : null;
  }
  public static Offset<Info.CreatureInfo> Pack(FlatBufferBuilder builder, CreatureInfoT _o) {
    if (_o == null) return default(Offset<Info.CreatureInfo>);
    return CreateCreatureInfo(
      builder,
      _o.ObjType,
      _o.Uid,
      _o.Level,
      _o.Exp,
      _o.Stat,
      _o.Hp,
      _o.Mp,
      _o.Ability,
      _o.Speed,
      _o.PosInfo);
  }
};

public class CreatureInfoT
{
  public Define.ObjectType ObjType { get; set; }
  public long Uid { get; set; }
  public byte Level { get; set; }
  public long Exp { get; set; }
  public Info.StatT Stat { get; set; }
  public int Hp { get; set; }
  public int Mp { get; set; }
  public Info.AbilityT Ability { get; set; }
  public Info.SpeedT Speed { get; set; }
  public Info.PositionInfoT PosInfo { get; set; }

  public CreatureInfoT() {
    this.ObjType = Define.ObjectType.PLAYER;
    this.Uid = 0;
    this.Level = 0;
    this.Exp = 0;
    this.Stat = new Info.StatT();
    this.Hp = 0;
    this.Mp = 0;
    this.Ability = new Info.AbilityT();
    this.Speed = new Info.SpeedT();
    this.PosInfo = new Info.PositionInfoT();
  }
}


}
