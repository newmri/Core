// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INFOPROTOCOL_INFO_H_
#define FLATBUFFERS_GENERATED_INFOPROTOCOL_INFO_H_

#include "flatbuffers/flatbuffers.h"

#include "define_protocol_generated.h"

namespace Info {

struct Vec2Int;

struct PositionInfo;
struct PositionInfoBuilder;
struct PositionInfoT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec2Int FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  Vec2Int()
      : x_(0),
        y_(0) {
  }
  Vec2Int(int32_t _x, int32_t _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  int32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2Int, 8);

struct PositionInfoT : public flatbuffers::NativeTable {
  typedef PositionInfo TableType;
  NativeInfo::Vec2Int pos{};
  Define::CreatureState state = Define::CreatureState_IDLE;
  Define::Dir move_dir = Define::Dir_UP;
};

struct PositionInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PositionInfoT NativeTableType;
  typedef PositionInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_STATE = 6,
    VT_MOVE_DIR = 8
  };
  const Info::Vec2Int *pos() const {
    return GetStruct<const Info::Vec2Int *>(VT_POS);
  }
  Define::CreatureState state() const {
    return static_cast<Define::CreatureState>(GetField<uint8_t>(VT_STATE, 0));
  }
  Define::Dir move_dir() const {
    return static_cast<Define::Dir>(GetField<uint8_t>(VT_MOVE_DIR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Info::Vec2Int>(verifier, VT_POS) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           VerifyField<uint8_t>(verifier, VT_MOVE_DIR) &&
           verifier.EndTable();
  }
  PositionInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PositionInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PositionInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PositionInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PositionInfoBuilder {
  typedef PositionInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Info::Vec2Int *pos) {
    fbb_.AddStruct(PositionInfo::VT_POS, pos);
  }
  void add_state(Define::CreatureState state) {
    fbb_.AddElement<uint8_t>(PositionInfo::VT_STATE, static_cast<uint8_t>(state), 0);
  }
  void add_move_dir(Define::Dir move_dir) {
    fbb_.AddElement<uint8_t>(PositionInfo::VT_MOVE_DIR, static_cast<uint8_t>(move_dir), 0);
  }
  explicit PositionInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PositionInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PositionInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<PositionInfo> CreatePositionInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Info::Vec2Int *pos = 0,
    Define::CreatureState state = Define::CreatureState_IDLE,
    Define::Dir move_dir = Define::Dir_UP) {
  PositionInfoBuilder builder_(_fbb);
  builder_.add_pos(pos);
  builder_.add_move_dir(move_dir);
  builder_.add_state(state);
  return builder_.Finish();
}

flatbuffers::Offset<PositionInfo> CreatePositionInfo(flatbuffers::FlatBufferBuilder &_fbb, const PositionInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PositionInfoT *PositionInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PositionInfoT>(new PositionInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PositionInfo::UnPackTo(PositionInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = pos(); if (_e) _o->pos = flatbuffers::UnPackVec2Int(*_e); }
  { auto _e = state(); _o->state = _e; }
  { auto _e = move_dir(); _o->move_dir = _e; }
}

inline flatbuffers::Offset<PositionInfo> PositionInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PositionInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePositionInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PositionInfo> CreatePositionInfo(flatbuffers::FlatBufferBuilder &_fbb, const PositionInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PositionInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _pos = flatbuffers::PackVec2Int(_o->pos);
  auto _state = _o->state;
  auto _move_dir = _o->move_dir;
  return Info::CreatePositionInfo(
      _fbb,
      &_pos,
      _state,
      _move_dir);
}

}  // namespace Info

#endif  // FLATBUFFERS_GENERATED_INFOPROTOCOL_INFO_H_
